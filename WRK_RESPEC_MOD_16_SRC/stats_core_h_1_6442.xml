<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="6442" Folder="\_Core Includes\" ResRefName="stats_core_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\stats_core_h.nss?moduleid=1&amp;resrefid=6442" Requested="0">
	<Agent type="empty">
		<ResRefName>stats_core_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>//void main() {}

#include "2da_constants_h"

// Stat constants - Individual
const int HERO_STAT_KILLS = 1001;
const int HERO_STAT_TOTAL_DAMAGE_DEALT = 1002;
const int HERO_STAT_FRIENDLY_FIRE_DEALT = 1003;
const int HERO_STAT_HIGHEST_DAMAGE_DEALT = 1004;
const int HERO_STAT_TOTAL_DAMAGE_PERCENT = 1005;
const int HERO_STAT_HIT_RATE = 1006;
const int HERO_STAT_MOST_POWERFUL_SLAIN = 1007;
const int HERO_STAT_INJURIES = 1008;
const int HERO_STAT_MOST_POWERFUL_RATING = 1009;
const int HERO_STAT_ATTACK_COUNT = 1010;
const int HERO_STAT_HIT_COUNT = 1011;


// Stat constants - Party
const int HERO_STAT_PARTY_KILLS = 2001;
const int HERO_STAT_PARTY_DAMAGE_DEALT = 2002;
const int HERO_STAT_MOST_POWERFUL_SLAIN_BY_PARTY = 2003;
// Number of creature kills party stat
const int HERO_STAT_GROUPTYPE_UNDEFINED = 0;
const int HERO_STAT_GROUPTYPE_DEMONS = 2004;
const int HERO_STAT_GROUPTYPE_FANTASTICAL = 2005;
const int HERO_STAT_GROUPTYPE_CONSTRUCT = 2006;
const int HERO_STAT_GROUPTYPE_HUMANOIDS = 2007;
const int HERO_STAT_GROUPTYPE_DARKSPAWNS = 2008;
const int HERO_STAT_GROUPTYPE_ARCH_ENEMIES = 2009;
const int HERO_STAT_GROUPTYPE_DRACONICS = 2010;
const int HERO_STAT_GROUPTYPE_CORRUPTED_ANIMALS = 2011;
const int HERO_STAT_GROUPTYPE_VERMIN = 2012;
const int HERO_STAT_GROUPTYPE_ANIMALS = 2013;
const int HERO_STAT_GROUPTYPE_HARMLESS = 2014;
const int HERO_STAT_STEALING_SUCCESS = 2015;
const int HERO_STAT_STEALING_FAILURE = 2016;
const int HERO_STAT_MOST_MONEY_EVER = 2017;
const int HERO_STAT_MONEY_SPENT = 2018;
const int HERO_STAT_DIALOGUES = 2019;
const int HERO_STAT_CODEX_ENTRIES = 2020;
const int HERO_STAT_WALKED_DISTANCE_MILES = 2021;
const int HERO_STAT_AREAS_EXPLORED = 2022;
const int HERO_STAT_TOTAL_TIME_PLAYED = 2023;
const int HERO_STAT_PREVIOUS_MONEY = 2024;
const int HERO_STAT_CURRENT_TIME_PLAYED = 2025;
const int HERO_STAT_TRACKING_POS_X = 2026;
const int HERO_STAT_TRACKING_POS_Y = 2027;
const int HERO_STAT_WALKED_DISTANCE_METERS = 2028;
const int HERO_STAT_MOST_POWERFUL_RATING_PARTY = 2029;
const int HERO_STAT_ITEMS_CRAFTED = 2031;

/*
const int HERO_STAT_CURRENT_TIME_COUNTER = 1018;
const int HERO_STAT_TOTAL_TIME_SPENT_IN_COMBAT = 1019;
const int HERO_STAT_TOTAL_TIME_SPENT_IN_DIALOGUE = 1020;
const int HERO_STAT_TOTAL_TIME_SPENT_IN_EXPLORE = 1021;
*/


// Stats values
const float STATS_WALKED_VELOCITY_MAX_CAP = 150.0;
const float STATS_TRACKING_TRACK_ACCURACY_COMBAT  = 3.0f;      // In combat, track position updates greater than 3 meters difference
const float STATS_TRACKING_TRACK_ACCURACY_DEFAULT = 1.5f;      // Out of combat, track greater than 1.5 meters

// Stats Appearance constants. This is what is returned by the function GetAppearanceType()
const int STATS_APP_INVALID = 0;
const int STATS_APP_BLANK_MODEL = 1;
const int STATS_APP_ELF = 2;
const int STATS_APP_DWARF = 3;
const int STATS_APP_DRAGON_NORMAL = 4;
const int STATS_APP_GOLEM_SHALE = 5;
const int STATS_APP_GOLEM_STONE = 6;
const int STATS_APP_GOLEM_STEEL = 7;
const int STATS_APP_BEAR_GREAT = 8;
const int STATS_APP_BEAR_BLACK = 9;
const int STATS_APP_BROODMOTHER = 10;
const int STATS_APP_BRONTO = 11;
const int STATS_APP_ARCANE_HORROR = 12;
const int STATS_APP_QUNARI = 13;
const int STATS_APP_WISP = 14;
const int STATS_APP_HUMAN = 15;
const int STATS_APP_HURLOCK_NORMAL = 16;
const int STATS_APP_HURLOCK_ALPHA = 17;
const int STATS_APP_HURLOCK_EMISSARY = 18;

const int STATS_APP_NUG = 20;

const int STATS_APP_WEREWOLF_A = 22;
const int STATS_APP_SHRIEK_A = 23;
const int STATS_APP_SUCCUBUS = 24;
const int STATS_APP_ABOMINATION = 25;
const int STATS_APP_REVENANT_A = 26;
const int STATS_APP_RAGE_DEMON = 27;
const int STATS_APP_CORPSE_D = 28;
const int STATS_APP_CORPSE_E = 29;
const int STATS_APP_CORPSE_S = 30;
const int STATS_APP_SHADE = 31;
const int STATS_APP_ASH_WRAITH = 32;
const int STATS_APP_DEEPSTALKER = 33;
const int STATS_APP_DOG_MABARI_ = 34;
const int STATS_APP_DOG_PARTY_MEMBER = 35;
const int STATS_APP_SQUIREL = 36;
const int STATS_APP_RAT_LARGE = 37;
const int STATS_APP_HUMAN_BOY = 38;
const int STATS_APP_HUMAN_SERVANT_AMBIENT = 39;
const int STATS_APP_HUMAN_LIBRARY_AMBIENT = 40;
const int STATS_APP_RAT_SMALL = 41;
const int STATS_APP_HUMAN_GUARD_AMBIENT = 42;
const int STATS_APP_HUMAN_NOBLE_AMBIENT = 43;
const int STATS_APP_HUMAN_MALE_FAT = 44;
const int STATS_APP_HUMAN_FEMALE_FAT = 45;
const int STATS_APP_NPC_DUNCAN = 46;
const int STATS_APP_OGRE_A = 47;

const int STATS_APP_WOLF = 49;
const int STATS_APP_GENLOCK_NORMAL = 50;
const int STATS_APP_GENLOCK_ALPHA = 51;
const int STATS_APP_GENLOCK_EMISSARY = 52;
const int STATS_APP_WITHERFANG = 53;
const int STATS_APP_AMBIENT_GOAT = 54;
const int STATS_APP_AMBIENT_MUTT = 55;

const int STATS_APP_SPIDER_CORRUPTED = 57;
const int STATS_APP_SPIDER_GIANT = 58;
const int STATS_APP_SPIDER_POISONOUS = 59;
const int STATS_APP_HUMAN_DYING_AMBIENT = 60;
const int STATS_APP_HUMAN_PRELUDE_WIZARD = 61;

const int STATS_APP_CAT = 63;
const int STATS_APP_DRAGONLING = 64;
const int STATS_APP_WILD_SYLVAN = 65;
const int STATS_APP_DRAGON_HIGH = 66;
const int STATS_APP_HUMAN_GIRL = 67;
const int STATS_APP_BEAR_BEARESKAN = 68;
const int STATS_APP_SKELETON_A = 69;
const int STATS_APP_SKELETON_F = 70;
const int STATS_APP_SKELETON_S = 71;
const int STATS_APP_PRIDE_DEMON = 72;
const int STATS_APP_BROODMOTHER_TENTACLE = 73;
const int STATS_APP_WOLF_BLIGHT = 74;
const int STATS_APP_LADY_OF_THE_FOREST = 75;
const int STATS_APP_PIG = 76;
const int STATS_APP_DEER = 77;
const int STATS_APP_OX = 78;
const int STATS_APP_RAM = 79;
const int STATS_APP_DRAGON_DRAKE = 80;
const int STATS_APP_SPIRIT_APPARATUS_HEAD = 81;
const int STATS_APP_ARCHDEMON_WOUNDED_ = 82;

const int STATS_APP_RAVEN = 84;
const int STATS_APP_HALLA = 85;
const int STATS_APP_CHICKEN = 86;
const int STATS_APP_OWL = 87;
const int STATS_APP_GRAND_OAK = 88;
const int STATS_APP_ARCHDEMON = 89;

//
const string STATS_LOC_MOST_POWERFUL_SLAIN = "stats_loc_most_powerful_slain";
const string STATS_LOC_MOST_POWERFUL_SLAIN_PARTY = "stats_loc_most_powerful_slain_party";

// Events
//const int EVENT_CUSTOM_STATS_REGEN = 10701;

// Properties
//const int MAX_REGEN_TICKS = 5;

const string HERO_STAT_VERSION = "&gt;&gt; STATS V0.017 &lt;&lt; ";

//follower tags
const string FOLLOWER_ALISTAIR = "gen00fl_alistair";
const string FOLLOWER_DOG = "gen00fl_dog";
const string FOLLOWER_LELIANA = "gen00fl_leliana";
const string FOLLOWER_LOGHAIN = "gen00fl_loghain";
const string FOLLOWER_MORRIGAN = "gen00fl_morrigan";
const string FOLLOWER_OGHREN = "gen00fl_oghren";
const string FOLLOWER_SHALE = "gen00fl_shale";
const string FOLLOWER_STEN = "gen00fl_sten";
const string FOLLOWER_WYNNE = "gen00fl_wynne";
const string FOLLOWER_ZEVRAN = "gen00fl_zevran";

// Print a log in the stats channel
void STATS_LogTrace(string sPrint)
{
    LogTrace(LOG_CHANNEL_SYSTEMS, HERO_STAT_VERSION + sPrint);
}



// Sets the property to the total time in seconds the player has played this game.
void STATS_SetGameTimePlayed();
void STATS_SetGameTimePlayed()
{
    object oHero = GetHero();
    int iSecondsPlayed = GetPlayTime();
    float fSecondsPlayed = IntToFloat(iSecondsPlayed);
    SetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_PLAYED, fSecondsPlayed);
}

////////////////////////////////////////////////////////////////////////////////
// DAMAGE
////////////////////////////////////////////////////////////////////////////////

// Handles the damager's INDIVIDUAL percent damage contribution
// only tracks the 10 followers and the PC
void STATS_HandlePercentDamageDealt(object oDamager);
void STATS_HandlePercentDamageDealt(object oDamager)
{
    object oHero = GetHero();
    string sDamager = GetTag(oDamager);

    if(oDamager == oHero ||
        sDamager == FOLLOWER_ALISTAIR ||
        sDamager == FOLLOWER_DOG ||
        sDamager == FOLLOWER_LELIANA ||
        sDamager == FOLLOWER_LOGHAIN ||
        sDamager == FOLLOWER_MORRIGAN ||
        sDamager == FOLLOWER_OGHREN ||
        sDamager == FOLLOWER_SHALE ||
        sDamager == FOLLOWER_STEN ||
        sDamager == FOLLOWER_WYNNE ||
        sDamager == FOLLOWER_ZEVRAN)
    {
        float fPartyDamage = GetCreatureProperty(oHero, HERO_STAT_PARTY_DAMAGE_DEALT);
        float fIndividualDamage = GetCreatureProperty(oDamager, HERO_STAT_TOTAL_DAMAGE_DEALT);
        if (fPartyDamage &gt; 0.0)
        {
            float fDamagePercent = ( fIndividualDamage / fPartyDamage ) * 100.0;
            SetCreatureProperty(oDamager, HERO_STAT_TOTAL_DAMAGE_PERCENT, fDamagePercent);
            //STATS_LogTrace(ToString(oDamager) +" deals " +ToString(fDamagePercent) +" % of party's total damage");
        }
    }
}

// Handles TOTAL damage dealt by the party
// Handed off to determine the damager's INDIVIDUAL percent damage contribution
// only tracks the 10 followers and the PC
void STATS_HandlePartyDamageDealt(float fDamage, object oDamager);
void STATS_HandlePartyDamageDealt(float fDamage, object oDamager)
{
    object oHero = GetHero();
    string sDamager = GetTag(oDamager);

    if(oDamager == oHero ||
        sDamager == FOLLOWER_ALISTAIR ||
        sDamager == FOLLOWER_DOG ||
        sDamager == FOLLOWER_LELIANA ||
        sDamager == FOLLOWER_LOGHAIN ||
        sDamager == FOLLOWER_MORRIGAN ||
        sDamager == FOLLOWER_OGHREN ||
        sDamager == FOLLOWER_SHALE ||
        sDamager == FOLLOWER_STEN ||
        sDamager == FOLLOWER_WYNNE ||
        sDamager == FOLLOWER_ZEVRAN)
    {
        float fOldParty = GetCreatureProperty(oHero, HERO_STAT_PARTY_DAMAGE_DEALT);
        float fNewParty = fOldParty + fDamage;
        SetCreatureProperty(oHero, HERO_STAT_PARTY_DAMAGE_DEALT, fNewParty);
        //DisplayFloatyMessage(oDamager, sDamager, FLOATY_MESSAGE, 16777215, 3.0f);
        //STATS_LogTrace("TOTAL PARTY DAMAGE = " +ToString(fNewParty));
    }
}

// Handles FRIENDLY FIRE damage dealt by the hero; all damage is tallied
void STATS_HandleFriendlyFireDealt(object oDamager, float fDamage);
void STATS_HandleFriendlyFireDealt(object oDamager, float fDamage)
{
    float fOld = GetCreatureProperty(oDamager, HERO_STAT_FRIENDLY_FIRE_DEALT);
    float fNew = fOld + fDamage;
    SetCreatureProperty(oDamager, HERO_STAT_FRIENDLY_FIRE_DEALT, fNew);
    //STATS_LogTrace(ToString(oDamager) + " | total friendly fire = " +ToString(fNew));
}

// Handles TOTAL damage dealt by the hero; all damage is tallied
// Friendly fire damage is tallied separately
void STATS_HandleTotalDamageDealt(object oDamager, object oTarget, float fDamage);
void STATS_HandleTotalDamageDealt(object oDamager, object oTarget, float fDamage)
{
    if (IsFollower(oTarget))
    {
        // Tally "friendly fire" stat instead
        STATS_HandleFriendlyFireDealt(oDamager, fDamage);
    }
    else
    {
        float fOld = GetCreatureProperty(oDamager, HERO_STAT_TOTAL_DAMAGE_DEALT);
        float fNew = fOld + fDamage;
        SetCreatureProperty(oDamager, HERO_STAT_TOTAL_DAMAGE_DEALT, fNew);
        STATS_LogTrace(ToString(oDamager) +" | total damage dealt = " +ToString(fNew));
    }
}


// Handles HIGHEST damage dealt by the hero; only the highest damage is saved
// Handed off to tally TOTAL damage dealt by the individual
// Handed off to tally TOTAL damage dealt by the party
// Handed off to determine the individual damager's percent damage contribution
void STATS_HandleDamageDealt(object oDamager, object oTarget, float fDamage);
void STATS_HandleDamageDealt(object oDamager, object oTarget, float fDamage)
{
    // Damage dealt to placeables doesn't count
    if (GetObjectType(oTarget) == OBJECT_TYPE_CREATURE)
    {
        // Only track the main hero's damage
        if (IsFollower(oDamager) == TRUE)
        {
            float fOld = GetCreatureProperty(oDamager, HERO_STAT_HIGHEST_DAMAGE_DEALT);
            if (fDamage &gt; fOld)
            {
                SetCreatureProperty(oDamager, HERO_STAT_HIGHEST_DAMAGE_DEALT, fDamage);
                float fNew = GetCreatureProperty(oDamager, HERO_STAT_HIGHEST_DAMAGE_DEALT);
                //STATS_LogTrace("!!NEW RECORD!! " +FloatToString(fDamage, 4, 1) + " DAMAGE INFLICTED!");
                //STATS_LogTrace(FloatToString(fNew, 4, 1) +" is the highest damage ever dealt.");
            }
            else
            {
                //STATS_LogTrace(FloatToString(fDamage, 4, 1) +" damage inflicted.");
                //STATS_LogTrace(FloatToString(fOld, 4, 1) +" is the highest damage ever dealt.");
            }
            // Tally total damage dealt
            STATS_HandleTotalDamageDealt(oDamager, oTarget, fDamage);
            // Tally TOTAL party damage
            STATS_HandlePartyDamageDealt(fDamage, oDamager);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// KILLS
////////////////////////////////////////////////////////////////////////////////


// Handles number of kills made by an individual
void STATS_HandleIndividualKills(object oKiller, object oTarget);
void STATS_HandleIndividualKills(object oKiller, object oTarget)
{
    float fOld = GetCreatureProperty(oKiller, HERO_STAT_KILLS);
    float fNew = fOld + 1.0;
    SetCreatureProperty(oKiller, HERO_STAT_KILLS, fNew);
}


// Handles number of kills made by the party
void STATS_HandlePartyKills(object oKiller, object oTarget);
void STATS_HandlePartyKills(object oKiller, object oTarget)
{
    object oHero = GetHero();
    // Only increment this stat when the party killed the target
    if (IsFollower(oKiller))
    {
        // Only creatures count towards this stat
        if (GetObjectType(oTarget) == OBJECT_TYPE_CREATURE)
        {
            float fOld = GetCreatureProperty(oHero, HERO_STAT_PARTY_KILLS);
            float fNew = fOld + 1.0;
            SetCreatureProperty(oHero, HERO_STAT_PARTY_KILLS, fNew);
            //STATS_LogTrace("Number of kills was " +FloatToString(fOld, 4, 1));
            //STATS_LogTrace("Number of kills is now " +FloatToString(fNew, 4, 1));
            // Hand off to individual kills
            STATS_HandleIndividualKills(oKiller, oTarget);
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// OTHER
////////////////////////////////////////////////////////////////////////////////


// Handles the hero's hit rate %
void STATS_HandleHitRate(object oAttacker, int nAttackResult);
void STATS_HandleHitRate(object oAttacker, int nAttackResult)
{
    if (IsFollower(oAttacker))
    {
        float fNewAttempt;
        float fNewHit;
        float fOldAttempt = GetCreatureProperty(oAttacker, HERO_STAT_ATTACK_COUNT);
        float fOldHit = GetCreatureProperty(oAttacker, HERO_STAT_HIT_COUNT);
        string sHit;

        // By virtue of being here, a party member has attacked; increment attack attempt counter
        fNewAttempt = fOldAttempt + 1.0;
        SetCreatureProperty(oAttacker, HERO_STAT_ATTACK_COUNT, fNewAttempt);
        // A hit isn't necessarily COMBAT_RESULT_HIT (crits, deathblows, backstabs, etc)
        if (nAttackResult != COMBAT_RESULT_MISS &amp;&amp; nAttackResult != COMBAT_RESULT_BLOCKED)
        {
            fNewHit = fOldHit + 1.0;
            SetCreatureProperty(oAttacker, HERO_STAT_HIT_COUNT, fNewHit);
            sHit = " | attack HIT! Hit rate = ";
        }
        if (nAttackResult == COMBAT_RESULT_MISS || nAttackResult == COMBAT_RESULT_BLOCKED)
        {
            // We missed, but we still need a "new" hit count
            fNewHit = fOldHit;
            sHit = " | attack missed. Hit rate = ";
        }
        // Finally, don't let attempt &amp; hit counts climb forever, but keep amounts proportionate
        if (fNewHit &gt;= 1000.0 &amp;&amp; fNewAttempt &gt;= 1000.0)
        {
            fNewHit = fNewHit/2;
            fNewAttempt = fNewAttempt/2;
        }
        // Yield hit rate % stat
        float fHitRate = (fNewHit/fNewAttempt) * 100.0;
        SetCreatureProperty(oAttacker, HERO_STAT_HIT_RATE, fHitRate);
        //STATS_LogTrace(ToString(oAttacker) +sHit +FloatToString(fHitRate, 3, 2) + " %");
    }
}

// Return the "power rating" of the passed creature based on
// its level, rank (boss, grunt, etc) and appearance type
// The higher the power rating, the more formidable the creature.
float STATS_GetCreaturePowerRating(object oCreature);
float STATS_GetCreaturePowerRating(object oCreature)
{
    int nAppearance = GetAppearanceType(oCreature);
    float fAppearanceRating = GetM2DAFloat(TABLE_APPEARANCE, "AppearanceRating", nAppearance);
    float fLevel = GetCreatureProperty(oCreature,PROPERTY_SIMPLE_LEVEL, PROPERTY_VALUE_TOTAL);
    int nRank = GetCreatureRank(oCreature);
    #ifdef DEBUG
    STATS_LogTrace("rank: " + IntToString(nRank));
    #endif
    float fRankRating = GetM2DAFloat(TABLE_CREATURERANKS, "RankRating", nRank);

    float fPowerRating = (fAppearanceRating + fLevel) * fRankRating;
    #ifdef DEBUG
    STATS_LogTrace("appearance rating: " + FloatToString(fAppearanceRating) + ", level: " + FloatToString(fLevel) + ", rank rating: " + FloatToString(fRankRating));
    #endif

    return fPowerRating;
}

// Tracks and saves the most powerful creature slain, as determined by its power rating
void STATS_TrackMostPowerfulSlain(object oKiller, object oCreature);
void STATS_TrackMostPowerfulSlain(object oKiller, object oCreature)
{
    // Only track kills made by the party
    if (!IsFollower(oKiller)) return;

    // Don't track friendly fire kills
    if (IsFollower(oCreature)) return;

    object oHero = GetHero();

    // Convert our new power rating into a float for ease of comparison
    float fNewRating = STATS_GetCreaturePowerRating(oCreature);

    // Get the killed creature in float form for ease of setting as a property
    float fCreature = StringToFloat(ObjectToString(oCreature));
    int iCreatureNameResRef = GetNameStrref(oCreature);
    float fCreatureNameResRef = IntToFloat(iCreatureNameResRef);

    #ifdef DEBUG
    STATS_LogTrace(ToString(oCreature) +" killed. Float = " +ToString(fCreature) + ". Rating = " +ToString(fNewRating));
    #endif

    // First determine if this is the "most powerful" for the individual
    float fOldIndividual = GetCreatureProperty(oKiller, HERO_STAT_MOST_POWERFUL_RATING);
    #ifdef DEBUG
    STATS_LogTrace(ToString(oKiller) +"'s old individual record is a rating of " +ToString(fOldIndividual));
    #endif
    //DisplayFloatyMessage(GetHero(), "New Rating: " + IntToString(FloatToInt(fNewRating)));
    if (fNewRating &gt; fOldIndividual || fOldIndividual == 0.0f)
    {
        // The newly killed creature is "more powerful" than the old one; save new stat to individual
        SetCreatureProperty(oKiller, HERO_STAT_MOST_POWERFUL_SLAIN, fCreatureNameResRef);
        SetCreatureProperty(oKiller, HERO_STAT_MOST_POWERFUL_RATING, fNewRating);

        #ifdef DEBUG
        STATS_LogTrace("Creature of type " +ToString(fCreature) +" is the most powerful slain by " +ToString(oKiller));
        #endif
    }

    // Then determine if this is the "most powerful" for the party
    float fOldParty = GetCreatureProperty(oHero, HERO_STAT_MOST_POWERFUL_RATING_PARTY);
    #ifdef DEBUG
    STATS_LogTrace("Old party record is a rating of " +ToString(fOldParty));
    #endif
    if (fNewRating &gt; fOldParty || fOldParty == 0.0f)
    {
        // The newly killed creature is "more powerful" than the old one; save new stat to party
        SetCreatureProperty(oHero, HERO_STAT_MOST_POWERFUL_SLAIN_BY_PARTY, fCreatureNameResRef);
        SetCreatureProperty(oHero, HERO_STAT_MOST_POWERFUL_RATING_PARTY, fNewRating);

        #ifdef DEBUG
        STATS_LogTrace("Creature of type " +ToString(fCreature) +" is the most powerful slain by the party");
        #endif
    }
}



// Returns the hero stat of the passed creature: demons, fantastical, constructs, etc.
int STATS_GetCreatureGroupType(object oCreature);
int STATS_GetCreatureGroupType(object oCreature)
{
    int nAppearance = GetAppearanceType(oCreature);
    int nGroupType = GetM2DAInt(TABLE_APPEARANCE, "GroupType", nAppearance);

    return nGroupType;
}


// Increment number of kills based on the target's group type
void STATS_CountKillsByGroupType(object oKiller, object oTarget);
void STATS_CountKillsByGroupType(object oKiller, object oTarget)
{
    object oHero = GetHero();
    if (IsFollower(oKiller))
    {
        int nHeroStat = STATS_GetCreatureGroupType(oTarget);

        //EV152534 - Cannot kill harmless creatures, don't include them in stats.
        if(nHeroStat != HERO_STAT_GROUPTYPE_HARMLESS)
        {
            float fOld = GetCreatureProperty(oHero, nHeroStat);
            float fNew = fOld +1;
            SetCreatureProperty(oHero, nHeroStat, fNew);
            #ifdef DEBUG
            STATS_LogTrace("The party has killed " +ToString(fNew) +" creatures of group " +ToString(nHeroStat));
            #endif
        }
    }
}


// Increments the number of injuries that an individual has incurred
void STATS_HandleInjuries(object oCharacter);
void STATS_HandleInjuries(object oCharacter)
{
    if (IsFollower(oCharacter))
    {
        float fOld = GetCreatureProperty(oCharacter, HERO_STAT_INJURIES);
        float fNew = fOld + 1;
        SetCreatureProperty(oCharacter, HERO_STAT_INJURIES, fNew);
        STATS_LogTrace(ToString(oCharacter) +" incurred " +ToString(fNew) +" injuries.");
    }
}


// Increments the number of dialogues started (not unique)
void STATS_TrackStartedDialogues(object oListener);
void STATS_TrackStartedDialogues(object oListener)
{
    if (IsHero(oListener))
    {
        float fOld = GetCreatureProperty(oListener, HERO_STAT_DIALOGUES);
        float fNew = fOld + 1;
        SetCreatureProperty(oListener, HERO_STAT_DIALOGUES, fNew);
        #ifdef DEBUG
        STATS_LogTrace(ToString(fNew) + " dialogues initiated.");
        #endif
    }
}

// Tracks the distance the player travels in miles
void STATS_TrackWalkedDistance();
void STATS_TrackWalkedDistance()
{
    // ----------------------------------------------------------------
    // Player distance walked tracking system position updates.
    // ----------------------------------------------------------------
    float fOldX = GetCreatureProperty(OBJECT_SELF, HERO_STAT_TRACKING_POS_X);
    float fOldY = GetCreatureProperty(OBJECT_SELF, HERO_STAT_TRACKING_POS_Y);
    vector vPos = GetPosition(OBJECT_SELF);
    location lA = GetLocation(OBJECT_SELF);
    location lB = Location(GetArea(OBJECT_SELF), Vector(fOldX,fOldY,vPos.z), 0.0);

    if ( (fOldX == 0.0) &amp;&amp; (fOldY == 0.0))
    {
        // Previous value was not valid (i.e. == 0.0), so update the stored location of the player
        SetCreatureProperty(OBJECT_SELF, HERO_STAT_TRACKING_POS_X, vPos.x);
        SetCreatureProperty(OBJECT_SELF, HERO_STAT_TRACKING_POS_Y, vPos.y);
    }
    else
    {
        location lA = GetLocation(OBJECT_SELF);
        location lB = Location(GetArea(OBJECT_SELF), Vector(fOldX,fOldY,vPos.z), 0.0);

        // In combat, we only register significant movements
        float fThreshHold = (GetGameMode() == GM_COMBAT? STATS_TRACKING_TRACK_ACCURACY_COMBAT: STATS_TRACKING_TRACK_ACCURACY_DEFAULT);

        // -----------------------------------------------------------------
        // basic 2d distance check. Check if the distance is relevant
        // and also do a sanity check to make sure something strange did
        // not occur (for example, due to an area change)
        // -----------------------------------------------------------------
        float fDist = GetDistanceBetweenLocations(lA,lB) ;
        if ( (fDist &gt; fThreshHold) &amp;&amp; (fDist &lt; STATS_WALKED_VELOCITY_MAX_CAP))
        {
            // Perform distance comparisons in meters ONLY
            float fMetersWalked =  GetCreatureProperty(OBJECT_SELF, HERO_STAT_WALKED_DISTANCE_METERS);
            float fTotalMetersWalked = fMetersWalked + fDist;
            SetCreatureProperty(OBJECT_SELF, HERO_STAT_WALKED_DISTANCE_METERS, fTotalMetersWalked);
            // Current amount is in meters; convert to and save stat as miles
            float fTotalMilesWalked = fTotalMetersWalked/1609.344;
            SetCreatureProperty(OBJECT_SELF, HERO_STAT_WALKED_DISTANCE_MILES, fTotalMilesWalked);
            /*
            #ifdef DEBUG
            STATS_LogTrace(ToString(fTotalMilesWalked) +" miles walked.");
            #endif
            */
        }
        // update the stored location of the player
        SetCreatureProperty(OBJECT_SELF, HERO_STAT_TRACKING_POS_X, vPos.x);
        SetCreatureProperty(OBJECT_SELF, HERO_STAT_TRACKING_POS_Y, vPos.y);
    }
}

// Runs whenever the party's money changes; tracks the amount; saves the highest amount ever
void STATS_HandleMaxMoney(int nMoney);
void STATS_HandleMaxMoney(int nMoney)
{
    //Money in copper
    object oHero = GetHero();
    float fOld = GetCreatureProperty(oHero, HERO_STAT_MOST_MONEY_EVER);
    float fMoney = IntToFloat(nMoney);

    if (fMoney &gt; fOld)
    {
        SetCreatureProperty(oHero, HERO_STAT_MOST_MONEY_EVER, fMoney);
        #ifdef DEBUG
        STATS_LogTrace("Most gold ever = " +ToString(fMoney));
        #endif
    }
}

// Runs whenever the party's money changes; if the change is negative, "money spent" increases
void STATS_TrackMoneySpent(int nMoney);
void STATS_TrackMoneySpent(int nMoney)
{
    //money in copper
    object oHero = GetHero();
    float fMoney = IntToFloat(nMoney);
    float fPrevious = GetCreatureProperty(oHero, HERO_STAT_PREVIOUS_MONEY);

    if (fMoney &lt; fPrevious)
    {
        // The player spent money
        float fDiff = fPrevious - fMoney;
        float fOld = GetCreatureProperty(oHero, HERO_STAT_MONEY_SPENT);
        float fNew = fOld +fDiff;
        SetCreatureProperty(oHero, HERO_STAT_MONEY_SPENT, fNew);
        #ifdef DEBUG
        STATS_LogTrace("Total gold spent = " +ToString(fNew));
        #endif
    }
    SetCreatureProperty(oHero, HERO_STAT_PREVIOUS_MONEY, fMoney);
}


// Runs whenever a new codex entry is added or updated; tracks the amount
void STATS_TrackCodexEntries();
void STATS_TrackCodexEntries()
{
    object oHero = GetHero();
    float fOld = GetCreatureProperty(oHero, HERO_STAT_CODEX_ENTRIES);
    float fNew = fOld +1;
    SetCreatureProperty(oHero, HERO_STAT_CODEX_ENTRIES, fNew);
    #ifdef DEBUG
    STATS_LogTrace("Codex entries unlocked = " +ToString(fNew));
    #endif
}

// Runs whenever an item is crafted, increments amount
void STATS_TrackItemsCrafted();
void STATS_TrackItemsCrafted()
{
    object oHero = GetHero();
    float fOld = GetCreatureProperty(oHero, HERO_STAT_ITEMS_CRAFTED);
    float fNew = fOld +1;
    SetCreatureProperty(oHero, HERO_STAT_ITEMS_CRAFTED, fNew);
    #ifdef DEBUG
    STATS_LogTrace("Items Crafted = " +ToString(fNew));
    #endif
}

// Tracks number of failed/succeeded stealing attempts
void STATS_TrackStealing(int bSuccess);
void STATS_TrackStealing(int bSuccess)
{
    object oHero = GetHero();
    if (bSuccess == TRUE)
    {
        // Increment number of successes
        float fOld = GetCreatureProperty(oHero, HERO_STAT_STEALING_SUCCESS);
        float fNew = fOld +1;
        SetCreatureProperty(oHero, HERO_STAT_STEALING_SUCCESS, fNew);
        #ifdef DEBUG
        STATS_LogTrace("Number of stealing successes = " +ToString(fNew));
        #endif
    }
    else
    {
        // Increment number of failures
        float fOld = GetCreatureProperty(oHero, HERO_STAT_STEALING_FAILURE);
        float fNew = fOld +1;
        SetCreatureProperty(oHero, HERO_STAT_STEALING_FAILURE, fNew);
        #ifdef DEBUG
        STATS_LogTrace("Number of stealing failures = " +ToString(fNew));
        #endif
    }
}

// Determines the percent of the game world explored (entered areas)
void STATS_TrackExploredAreas(int nTable, int nAreaID);
void STATS_TrackExploredAreas(int nTable, int nAreaID)
{
    object oHero = GetHero();
    float fValue = GetM2DAFloat(nTable, "AreaWeight", nAreaID);
    // Update the stat
    float fOld = GetCreatureProperty(oHero, HERO_STAT_AREAS_EXPLORED);
    float fNew = fOld + fValue;
    SetCreatureProperty(oHero, HERO_STAT_AREAS_EXPLORED, fNew);
    #ifdef DEBUG
    STATS_LogTrace(ToString(fValue) +"% added for exploring area #" +ToString(nAreaID));
    STATS_LogTrace("The player has explored " +ToString(fNew) +"% of the game world.");
    #endif
}

/*
void ACH_ResetTimeSpentCurrentCounter();
void ACH_ResetTimeSpentCurrentCounter()
{

    object oHero = GetHero();
    float fCurrentTime = IntToFloat(GetTime());
    SetCreatureProperty(oHero, HERO_STAT_CURRENT_TIME_COUNTER, fCurrentTime);

}

// Based on teh previous game mode, update the proper time counter
void ACH_UpdateTimeSpent(int nOldGameMode);
void ACH_UpdateTimeSpent(int nOldGameMode)
{
    object oHero = GetHero();
    float fCurrentTime = IntToFloat(GetTime());
    float fSpentTime =  fCurrentTime - GetCreatureProperty(oHero, HERO_STAT_CURRENT_TIME_COUNTER);
    SetCreatureProperty(oHero, HERO_STAT_CURRENT_TIME_COUNTER, fCurrentTime);

    switch (nOldGameMode)
    {
            case GM_COMBAT:
            {
                float fCombat = GetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_SPENT_IN_COMBAT) + fSpentTime ;
                SetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_SPENT_IN_COMBAT, fCombat);
            }
            break;

            case GM_DIALOG:
            {
                float fDialogue = GetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_SPENT_IN_DIALOGUE) + fSpentTime ;
                SetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_SPENT_IN_DIALOGUE, fDialogue);
            }
            break;

            case GM_EXPLORE:
            {
                float fExplore = GetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_SPENT_IN_EXPLORE) + fSpentTime ;
                SetCreatureProperty(oHero, HERO_STAT_TOTAL_TIME_SPENT_IN_EXPLORE, fExplore);
            }
            break;


    }


}
*/</text>
	</Agent>
</Resource>