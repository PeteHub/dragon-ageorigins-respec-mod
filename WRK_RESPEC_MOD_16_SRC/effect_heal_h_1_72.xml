<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="72" Folder="\_Game Effects\Effects\" ResRefName="effect_heal_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\effect_heal_h.nss?moduleid=1&amp;resrefid=72" Requested="0">
	<Agent type="empty">
		<ResRefName>effect_heal_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>// -----------------------------------------------------------------------------
// effect_heal_h
// -----------------------------------------------------------------------------
/*
    Effect Heal

        When n applied to an object, this effect
        * restores the given amount of health to the object. The object’s health will
        * not be raised above its maximum health.


*/
// -----------------------------------------------------------------------------
// Owner: Georg Zoeller
// -----------------------------------------------------------------------------

#include "ui_h"
#include "log_h"
#include "core_h"
#include "2da_constants_h"
//#include "wrappers_h"
#include "events_h"
#include "effect_constants_h"
#include "sys_soundset_h"

const float BLOOD_MAGIC_FACTOR = 10.0f;


/** @brief Returns an effect which heals an object.
*
* Constructor for the heal health effect. When applied to an object, this effect
* restores the given amount of health to the object. The object’s health will
* not be raised above its maximum health. If the object is a creature which is
* dead no health will be healed unless bHealIfDead is TRUE, in which case the
* creature will be resurrected and healed.
*
* @param nValue – The amount of health.
* @param bHealIfDead – Whether or not to resurrect and heal dead creatures.
*
* @author David Sims
*
* @return a valid effect of type EFFECT_TYPE_HEALHEALTH.
*/
effect EffectHeal(float fValue, int bIgnoreBloodMagic = FALSE);

effect EffectHeal(float fValue, int bIgnoreBloodMagic = FALSE)
{
    effect eEffect = Effect(EFFECT_TYPE_HEALHEALTH);
    eEffect = SetEffectFloat(eEffect, 0, fValue);
    eEffect = SetEffectInteger(eEffect, 0, bIgnoreBloodMagic);
    return eEffect;
}


//------------------------------------------------------------------------------
// @brief: Instantly heals the target by nAmount, using oHealer as source
//
//------------------------------------------------------------------------------
int Effect_ApplyInstantEffectHeal(object oTarget, object oHealer, float fAmount, int bIgnoreBloodMagic = FALSE);
int Effect_ApplyInstantEffectHeal(object oTarget, object oHealer, float fAmount, int bIgnoreBloodMagic = FALSE)
{
    #ifdef DEBUG
    Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal", GetTag(oHealer) + " healing target for " + FloatToString(fAmount), oTarget);
    #endif
    //Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal", "bIgnoreBloodMagic = " + ToString(bIgnoreBloodMagic));
    //Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal", "IsModalAbilityActive(oTarget, ABILITY_SPELL_BLOOD_MAGIC) = " + ToString(IsModalAbilityActive(oTarget, ABILITY_SPELL_BLOOD_MAGIC)));

    // -------------------------------------------------------------------------
    // Allow some of the soundsets to play again
    // -------------------------------------------------------------------------
    SSResetSoundsetRestrictionsOnHeal(oTarget);

    float fMaxHealth = GetMaxHealth(oTarget);
    float fCurrentHealth = GetCurrentHealth(oTarget);
    int bIsDead = IsDead(oTarget);

    // -------------------------------------------------------------------------
    // Retrieve the healing modifier from the creature.
    // -------------------------------------------------------------------------
    float fFactor = GetCreatureProperty(oTarget, 51) / 100.0f;
    // -------------------------------------------------------------------------
    // Savegame compatibility for builds &lt;= 7793
    // -------------------------------------------------------------------------
    #ifdef DEBUG
        if (fFactor &lt; 0.01)
        {
            fFactor = 1.0f;
        }
    #endif
    fAmount *= fFactor;


    //--------------------------------------------------------------------------
    // factor in game difficulty.
    //--------------------------------------------------------------------------
    fAmount *= Diff_GetRulesHealingModifier(oTarget);




    // -------------------------------------------------------------------------
    // Zero negative heals
    // -------------------------------------------------------------------------
    if ( fAmount &lt; 0.0f )
    {
        fAmount = 0.0f;
    }

    // if cursed, don't heal
    if (GetHasEffects(oTarget, EFFECT_TYPE_CURSE_OF_MORTALITY) == TRUE)
    {
        return TRUE;
    }

    // is Blood Magic active
    if (IsModalAbilityActive(oTarget, ABILITY_SPELL_BLOOD_MAGIC) )
    {
        Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal","Blood Magic Active.", oTarget);

        if (bIgnoreBloodMagic == FALSE)
        {
            Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal","Applying Blood Magic Factor", oTarget);

            // healing is reduced by a specific factor
            fAmount /= BLOOD_MAGIC_FACTOR;
        } else
        {
            Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal","NOT Applying Blood Magic Factor", oTarget);
        }
    }

    if ( (fCurrentHealth + fAmount) &gt; fMaxHealth )
    {
        fAmount = fMaxHealth - fCurrentHealth;
    }

    float fNewHealth = fCurrentHealth + fAmount;

    if ( !IsDead(oTarget)  )
    {
        SetCurrentHealth(oTarget, (fCurrentHealth + fAmount) );

        UI_DisplayHealFloaty(oTarget,oHealer, FloatToInt(fAmount));


        // 06/12/07 - Halve the target's gore level.
        // PeterT - Re-enabling at Georg's request. How else is gore reduced on a creature?
        float fCurrentGore = GetCreatureGoreLevel(oTarget);
        fCurrentGore /= 2.0;
        SetCreatureGoreLevel(oTarget, fCurrentGore);
    }
    else {
        Log_Trace(LOG_CHANNEL_EFFECTS,"effect_heal_h.Effects_HandleApplyEffectHeal","creature DEAD - NOT healing dead creature", oTarget);
        return FALSE;
    }
    return TRUE;

}

///////////////////////////////////////////////////////////////////////////////
//  Effects_HandleApplyEffectHealHealth
///////////////////////////////////////////////////////////////////////////////
//  Created By: David Sims
//  Created On: July 14, 2006
///////////////////////////////////////////////////////////////////////////////
int Effects_HandleApplyEffectHeal(effect eEffect)
{
    float fAmount = GetEffectFloat(eEffect, 0);
    int bIgnoreBloodMagic = GetEffectInteger(eEffect, 0);

    object oHealer = GetEffectCreator(eEffect);
    object oTarget = OBJECT_SELF;

    return   Effect_ApplyInstantEffectHeal(oTarget, oHealer, fAmount, bIgnoreBloodMagic);

}

///////////////////////////////////////////////////////////////////////////////
//  Effects_HandleRemoveEffectHealHealth
///////////////////////////////////////////////////////////////////////////////
//  Created By: David Sims
//  Created On: July 14, 2006
///////////////////////////////////////////////////////////////////////////////
int Effects_HandleRemoveEffectHeal(effect eEffect)
{
    return TRUE;
}



void HealPartyMembers(int bIgnoreBloodMagic = FALSE, int bRestoreStamina=FALSE);
void HealPartyMembers(int bIgnoreBloodMagic = FALSE, int bRestoreStamina=FALSE)
{

    object[] partyMembers = GetPartyList();
    int nMembers = GetArraySize(partyMembers);
    int i;

    for (i = 0; i &lt; nMembers; i++)
    {
         Effect_ApplyInstantEffectHeal(partyMembers[i],OBJECT_INVALID, 5000.0, bIgnoreBloodMagic);
         if (bRestoreStamina)
         {
              UpdateCreatureProperty(partyMembers[i], PROPERTY_DEPLETABLE_MANA_STAMINA, 5000.00 , PROPERTY_VALUE_CURRENT);
         }
    }
}


void HealCreature(object oCreature, int bIgnoreBloodMagic = FALSE, float fAmount = -1.0f, int bRestoreStamina = FALSE)
{
    float fHeal = GetCreatureProperty(oCreature, PROPERTY_DEPLETABLE_HEALTH);

    if (fAmount &gt; 0.0f)
    {
        fHeal = MinF(fHeal,fAmount);
    }

    if (bRestoreStamina)
    {
          UpdateCreatureProperty(oCreature, PROPERTY_DEPLETABLE_MANA_STAMINA, 5000.00 , PROPERTY_VALUE_CURRENT);
    }

    Effect_ApplyInstantEffectHeal(oCreature,OBJECT_INVALID, fHeal , bIgnoreBloodMagic);
}</text>
	</Agent>
</Resource>