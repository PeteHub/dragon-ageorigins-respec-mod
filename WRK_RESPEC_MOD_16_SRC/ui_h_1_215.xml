<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="215" Folder="\_Core Includes\" ResRefName="ui_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\ui_h.nss?moduleid=1&amp;resrefid=215" Requested="0">
	<Agent type="empty">
		<ResRefName>ui_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>//------------------------------------------------------------------------------
// ui_h
//------------------------------------------------------------------------------
/*
    Any function interacting with the UI is wrapped here.

*/
//------------------------------------------------------------------------------
// @author georg zoeller
//------------------------------------------------------------------------------

#include "2da_constants_h"
#include "log_h"
#include "core_h"

const int UI_CFG_SHOW_ABILITY_MESSAGES = 1;

const int UI_MESSAGE_OUT_OF_AMMO        = 1;
const int UI_MESSAGE_DEATHBLOW          = 2;
const int UI_MESSAGE_ABILITY_CONDITION_NOT_MET  = 3;
const int UI_MESSAGE_MISSED             = 4;
const int UI_MESSAGE_BLOCKED            = 5000;
const int UI_MESSAGE_BACKSTAB           = 5;
const int UI_MESSAGE_OUT_OF_MANA        = 6;
const int UI_MESSAGE_OUT_OF_STAMINA     = 7;
const int UI_MESSAGE_IMMUNE             = 8;
const int UI_MESSAGE_RESISTED           = 9;
const int UI_MESSAGE_LEVELUP            = 10;
const int UI_MESSAGE_STUNNED            = 11;
const int UI_MESSAGE_GRAB_BROKEN        = 12;
const int UI_MESSAGE_TRAP_TRIGGERED     = 13;
const int UI_MESSAGE_TRAP_PLACED        = 14;
const int UI_MESSAGE_TRAP_DETECTED      = 15;
const int UI_MESSAGE_CANT_DO_IN_COMBAT  = 16;
const int UI_MESSAGE_LOCKED             = 17;
const int UI_MESSAGE_UNLOCKED           = 18;
const int UI_MESSAGE_CAN_NOT_USE_OBJECT = 19;
const int UI_MESSAGE_APPROVAL_INCREASED = 20;
const int UI_MESSAGE_APPROVAL_DECREASED = 21;
const int UI_MESSAGE_INTERRUPTED        = 22;
const int TRAP_DISARM_SUCCEEDED         = 23;
const int TRAP_DISARM_FAILED            = 24;
const int UI_MESSAGE_SHATTERED          = 25;
const int UI_MESSAGE_EVASION            = 27;
const int UI_MESSAGE_NO_EFFECT          = 28;
const int UI_MESSAGE_UNLOCK_SKILL_LOW   = 29;
const int UI_MESSAGE_KEY_REQUIRED       = 30;
const int UI_MESSAGE_SPELL_IMMUNITY     = 31;
const int UI_MESSAGE_UNLOCKED_BY_KEY    = 32;
const int UI_MESSAGE_NOT_AT_THIS_LOCATION    = 33;

const int UI_MESSAGE_LOCKPICK_NOT_POSSIBLE = 3516;
const int UI_MESSAGE_DISARM_NOT_POSSIBLE = 3517;
const int UI_MESSAGE_LEVER_PULLED = 3520;
const int UI_MESSAGE_VALVE_OPEN = 3521;
const int UI_MESSAGE_VALVE_CLOSE = 3522;

const int STRING_ID_XP_FLOATY = 379101;


const int UI_DEBUG_LAST_MOVEMENT_FAILED = 1001;
const int UI_DEBUG_LAST_ATTACK_FAILED = 1002;
const int UI_DEBUG_LAST_WEAPON_SWITCH_FAILED = 1003;
const int UI_DEBUG_LAST_WAIT_FAILED = 1004;
const int UI_DEBUG_CREATURE_WAITING_NOW = 1005;
const int UI_DEBUG_NO_LOS = 1006;
const int UI_DEBUG_INVALID_PATH = 1007;
const int UI_DEBUG_INVALID_DATA = 1008;
const int UI_DEBUG_COMMAND_CLEARED = 1009;
const int UI_DEBUG_COMMAND_FAILED = 1010;
const int UI_DEBUG_NO_SPACE_IN_MELEE_RING = 1011;
const int UI_DEBUG_TARGET_DESTROYED = 1012;
const int UI_DEBUG_MOVEMENT_DISABLED = 1013;
const int UI_DEBUG_CREATURE_IMMORTAL = 1014;
const int UI_DEBUG_EVENT_IMPACT_ATTACK = 1015;
const int UI_DEBUG_EVENT_IMPACT_CAST = 1016;
const int UI_DEBUG_COMMAND_TIMED_OUT = 1017;

const int UI_MESSAGE_TYPE_SPECIAL = 10000;
const int UI_SPECIAL_MSG_DAMAGE =  10001;
const int UI_SPECIAL_MSG_DAMAGE_CRIT = 10002;
const int UI_SPECIAL_MESSAGE_HEAL = 10003;

const int UI_MESSAGE_KEY_ACQUIRED = 4001;

const int UI_MESSAGE_TYPE_PORTRAIT_FOLLOWER = 4;
const int UI_MESSAGE_TYPE_PORTRAIT = 3;

const int UI_DISPLAY_MASK_PLAYER   = 0x00000001;
const int UI_DISPLAY_MASK_PARTY    = 0x00000002;
const int UI_DISPLAY_MASK_HOSTILE  = 0x00000004;
const int UI_DISPLAY_MASK_ALL      = 0x000000ff;

const float UI_DISPLAY_DURATION_DEFAULT  = 3.0;
const float UI_DISPLAY_DURATION_CODEX    = 3.0;
const float UI_DISPLAY_DURATION_POPUP    = 3.0;
const float UI_DISPLAY_DURATION_ABILITY  = 1.5;
const float UI_DISPLAY_DURATION_DAMAGE   = 1.5;
const float UI_DISPLAY_DURATION_XP       = 1.5;

const int   UI_DISPLAY_COLOR_DEFAULT  = 0xFFFFFF;
const int   UI_DISPLAY_COLOR_CODEX    = 0xFFFFFF;
const int   UI_DISPLAY_COLOR_POPUP    = 0xFFFFFF;
const int   UI_DISPLAY_COLOR_ABILITY  = 0xffff00;
const int   UI_DISPLAY_COLOR_DAMAGE   = 0xFFFFFF;
const int   UI_DISPLAY_COLOR_XP       = 0xFFFFFF;
const int   UI_DISPLAY_COLOR_ERROR    = 0xFF0000;


void UI_DisplayMessage(object oTarget, int nMessage, string sParam0 = "", int nColor = 0);


int UI_CheckDisplayMask(int nMessage, object oTarget)
{
    int nDispMask = GetM2DAInt(TABLE_UI_MESSAGES,"DisplayMask",nMessage);


    if (nDispMask != 0)
    {
        int bShow = ((nDispMask &amp; UI_DISPLAY_MASK_ALL) == UI_DISPLAY_MASK_ALL);

        if (!bShow)
        {
            int bPlayer = IsControlled(oTarget);
            int bParty  = IsFollower(oTarget);
            int bHostile = IsObjectHostile(GetHero(), oTarget);

            bShow = ((nDispMask &amp; UI_DISPLAY_MASK_PLAYER) == UI_DISPLAY_MASK_PLAYER) &amp;&amp; bPlayer;
            bShow = bShow || (((nDispMask &amp; UI_DISPLAY_MASK_PARTY) == UI_DISPLAY_MASK_PARTY) &amp;&amp; bParty);
            bShow = bShow || (((nDispMask &amp; UI_DISPLAY_MASK_HOSTILE) == UI_DISPLAY_MASK_HOSTILE) &amp;&amp; bParty);
        }

        return bShow;
    }
    return FALSE;
}

// -----------------------------------------------------------------------------
// @author: georg
//
// Check the object mask setting for the message to determine whether or not
// it can be shown on the selected object type
// -----------------------------------------------------------------------------
int UI_CheckObjectMask(int nMessage, object oTarget)
{
    int nDispMask = GetM2DAInt(TABLE_UI_MESSAGES,"ObjectMask",nMessage);

    if (nDispMask != 0)
    {
        int bShow = ((nDispMask &amp; 0xffffff) == 0xffffff);

        if (!bShow)
        {
            bShow = ((nDispMask &amp; GetObjectType(oTarget)) == GetObjectType(oTarget));
        }

        return bShow;
    }
    return FALSE;
}



void UI_DisplayDamageFloaty(object oTarget, object oDamager, int nDamage, int nType, int nAbilityId = 0, int bBonusDamage = 0, int bManaDamage = 0, int bBackstab = 0, int nDamageType = DAMAGE_TYPE_PHYSICAL)
{

    int nMessage = UI_SPECIAL_MSG_DAMAGE;
    int bCritical = FALSE;
    if (nType == 1 || bBackstab)
    {
        nMessage = UI_SPECIAL_MSG_DAMAGE_CRIT;
        bCritical = TRUE;
    }
    else if (nType == 2)
    {
        nMessage = UI_SPECIAL_MESSAGE_HEAL;

        // heal messages do not show for 0 hp
        if(nDamage == 0)
        {
             return;
        }
    }

    if (GetM2DAInt(TABLE_UI_MESSAGES,"bDisabled",nMessage))
    {
        #ifdef DEBUG
        Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage), "Not showing message " + ToString(nMessage) + " - bDisabled set.", oTarget);
        #endif
        return;
    }

    if (IsPlot(oTarget))
    {
        UI_DisplayMessage(oTarget, 1014);
        #ifdef DEBUG
        Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage), "Not showing message " + ToString(nMessage) + " - object is PLOT.", oTarget);
        #endif
        return;
    }


    int nColor = GetM2DAInt(TABLE_UI_MESSAGES,"Color",nMessage);

    // color override;
    if (IsPartyMember(oTarget))
    {
            nColor = 0xcc0000;
    }
    else if (IsPartyMember(oDamager))
    {
        nColor = 0xffffff;

        // -----------------------------------------------------------------
        // Special Attacks: Yellow
        // -----------------------------------------------------------------
       /* if (nAbilityId)
        {
             nColor = 0xffff00;
        }*/

        int nClr = GetColorByDamageType(nDamageType);
        if (nClr != 0)
        {
            nColor = nClr;
        }

    }

    if (bManaDamage)
    {
        nColor = 0x6699FF;
    }


    if (nType == 2)
    {

          // -----------------------------------------------------------------
          // Healing: Green
          // -----------------------------------------------------------------
          nColor = 0x00cc00;
    }

    string sPrefix = "";
    string sPostfix = "";
    if (nMessage==UI_SPECIAL_MESSAGE_HEAL || bBonusDamage)
    {
        sPrefix = GetStringByStringId(397775); /* + */
    }
    else if (bManaDamage == 1)
    {
        sPrefix = GetStringByStringId(397776); /* - */
    }
    else if (bManaDamage == 2)
    {
        sPrefix = GetStringByStringId(397776); /* - */
    }



    if  (UI_CheckDisplayMask(nMessage,oTarget))
    {
        int nStyle = (bCritical)? FLOATY_CRITICAL_HIT : FLOATY_HIT;
        DisplayFloatyMessage(oTarget, sPrefix + IntToString(abs(nDamage)) + sPostfix, nStyle, nColor, UI_DISPLAY_DURATION_DAMAGE);
    }
}


void UI_DisplayHealFloaty(object oTarget, object oHealer, int nHealed)
{
     UI_DisplayDamageFloaty(oTarget,oHealer, nHealed, 2 );
}



/**-----------------------------------------------------------------------------
* @brief Displays placeable popup text. Returns TRUE if popup was displayed.
*-----------------------------------------------------------------------------*/
int UI_DisplayPopupText(object oPlaceable, object oTarget)
{
    string sText = GetPlaceablePopupText(oPlaceable);
    if (GetStringLength(sText))
    {
        DisplayFloatyMessage(oTarget, sText, FLOATY_MESSAGE, UI_DISPLAY_COLOR_POPUP, UI_DISPLAY_DURATION_POPUP);
        return TRUE;
    }
    return FALSE;
}


void UI_DisplayMessage(object oTarget, int nMessage, string sParam0 = "", int nColor = 0)
{
    /*
        FLOATY_HIT - Rising white number
        FLOATY_CRITICAL_HIT - Rising white number that grows and turns red
        FLOATY_MESSAGE - Yellow text (for debugging)
    */

    if (GetM2DAInt(TABLE_UI_MESSAGES,"bDisabled",nMessage))
    {
        #ifdef DEBUG
        Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage), "Not showing message " + ToString(nMessage) + " - bDisabled set.", oTarget);
        #endif
        return;
    }


    int bShow = UI_CheckObjectMask(nMessage,oTarget)   ;
    if (!bShow)
    {
        #ifdef DEBUG
        Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage), "Not showing message " + ToString(nMessage) + " - Object Mask Failed", oTarget);
        #endif
    }


    bShow = bShow &amp;&amp; UI_CheckDisplayMask(nMessage, oTarget) &amp;&amp; UI_CheckObjectMask(nMessage,oTarget);


    if (bShow)
    {
        int nId = GetM2DAInt(TABLE_UI_MESSAGES,"StringId",nMessage);
        string sMessage;

        int nType =     GetM2DAInt(TABLE_UI_MESSAGES,"Type",nMessage);

        float fDuration = GetM2DAFloat(TABLE_UI_MESSAGES,"Duration",nMessage);
        if (fDuration &lt;= 0.2f)
        {
            fDuration = UI_DISPLAY_DURATION_DEFAULT;
        }


        if (nType == 2 /*debug*/ &amp;&amp; !GetDebugHelpersEnabled())
        {
             #ifdef DEBUG
             Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage), "Not showing type 2 (debug) message " + ToString(nMessage) + " - Debug Helpers disabled", oTarget);
             #endif
             return;
        }

        // -----------------------------------------------------------------
        // special messages are defined in the scripted param to this function
        // -----------------------------------------------------------------
        if (nMessage &gt;=UI_MESSAGE_TYPE_SPECIAL)
        {
            sMessage = sParam0;
        }
        else
        {
            if (nType == 2 &amp;&amp; !LOG_ENABLED)
            {
                 #ifdef DEBUG
                 Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage), "Not showing message " + ToString(nMessage) + " - Debug Type 2 but not log enabled.", oTarget);
                 #endif
                 return;
            }

            if (nId == 0)
            {
                sMessage = "?"  + GetM2DAString(TABLE_UI_MESSAGES,"StringText",nMessage);
            }
            else
            {
                sMessage = GetStringByStringId(nId);

                if (sMessage =="")
                {
                    #ifdef DEBUG
                    Warning("String table lookup on UI message failed. Blocking bug to georg. Details:" + ToString(nMessage) + " strid:" + ToString(nId));
                    #endif
                }
            }
        }


        if (GetObjectType(oTarget) == OBJECT_TYPE_CREATURE)
        {
            if (GetStealthEnabled(oTarget) &amp;&amp; !IsPartyMember(oTarget))
            {
                  #ifdef DEBUG
                    Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage", "Not showing message: creature stealthy" , oTarget);
                    #endif
                    return;
            }

        }

        if (nColor == 0)
        {
            nColor   = GetM2DAInt(TABLE_UI_MESSAGES,"Color",nMessage);
        }
        #ifdef DEBUG
        Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage " + ToString(nMessage) + " " + IntToHexString(nColor), sMessage, oTarget);
        #endif
        if (nType == UI_MESSAGE_TYPE_PORTRAIT)
        {
            DisplayPortraitMessage(oTarget, sMessage, nColor);
        }
        else  if (nType == UI_MESSAGE_TYPE_PORTRAIT_FOLLOWER)
        {
            if (IsFollower(oTarget))
            {
                DisplayPortraitMessage(oTarget, sMessage, nColor);
            }
            else
            {
                DisplayFloatyMessage( oTarget, sMessage ,  FLOATY_MESSAGE, nColor, fDuration);
            }
        }
        else
        {
             if (nMessage == UI_MESSAGE_MISSED || nMessage == UI_MESSAGE_IMMUNE)
                {
                    DisplayFloatyMessage( oTarget, sMessage ,  FLOATY_HIT, nColor, fDuration);
                }
             else
             {

            DisplayFloatyMessage( oTarget, sMessage ,  FLOATY_MESSAGE, nColor, fDuration);
             }
        }
    }
    else
    {
        #ifdef DEBUG
        Log_Trace(LOG_CHANNEL_UIMESSAGES, "UI_DisplayMessage", "not showing " +ToString(nMessage), oTarget);
        #endif
    }


}

void UI_DisplayApprovalChangeMessage(object oFollower, int nApprovalChange)
{

    // TEMP - until we decide what to do with these message
    int nMes;
    if(nApprovalChange &gt; 0)
        nMes = UI_MESSAGE_APPROVAL_INCREASED;
    else
        nMes = UI_MESSAGE_APPROVAL_DECREASED;

    UI_DisplayMessage(oFollower, nMes, IntToString(nApprovalChange));
}


void UI_DisplayAbilityMessage(object oTarget, int nAbility, int nDeactivate = FALSE)
{

    if (!IsPartyMember(oTarget))
    {
        if (nAbility == ABILITY_TALENT_STEALTH)
        {
            return;
        }

        if (!GetCombatState(oTarget))
        {
            return;
        }
    }



    if (!nDeactivate &amp;&amp; (!GetStealthEnabled(oTarget)|| IsPartyMember(oTarget))  )
    {
        if (GetShowSpecialMoveFloaties())
        {
            int nStringId = GetM2DAInt(TABLE_ABILITIES_SPELLS, "Namestrref", nAbility);
            string sDisplay = "";
            if (nStringId == 0 )
            {
                #ifdef DEBUG
                if (GetDebugHelpersEnabled())
                {
                    sDisplay = "?- NO STRINGREF - " + GetM2DAString(TABLE_ABILITIES_SPELLS, "Label", nAbility);
                }
                #endif
                return;
            }
            else
            {
                sDisplay = GetStringByStringId(nStringId);
            }

          /*  if(nDeactivate &amp;&amp; GetDebugHelpersEnabled())
            {
                //    s = "?DEACTIVATING: " + s;
            }*/

            DisplayFloatyMessage(oTarget, sDisplay, FLOATY_MESSAGE, UI_DISPLAY_COLOR_ABILITY, UI_DISPLAY_DURATION_ABILITY);
        }
    }
}

void UI_DisplayAreaEnterMessage()
{
    string sName = GetName(GetArea(GetHero()));


    if (IsStringEmpty(sName) &amp;&amp; LOG_ENABLED)
    {
        #ifdef DEBUG
        DisplayStatusMessage("Missing Area Name!!", UI_DISPLAY_COLOR_ERROR);
        #endif
    }
    else
    {
       DisplayStatusMessage(sName , UI_DISPLAY_COLOR_DEFAULT);
    }


}

void UI_DisplayCodexMessage(object oPlaceable, string sText)
{
    string sPrefix = GetStringByStringId(377259);
    sText = sPrefix + " " + sText;
    DisplayFloatyMessage(oPlaceable, sText, FLOATY_MESSAGE, UI_DISPLAY_COLOR_CODEX, UI_DISPLAY_DURATION_CODEX);
}


void UI_DisplayRoomEnterMessage(object oTrigger)
{

    int nId = GetLocalInt(oTrigger, TRIGGER_ROOM_TEXT);

    if (nId &gt; 0)
    {
        string sStr = GetStringByStringId(nId);
        DisplayStatusMessage(sStr, UI_DISPLAY_COLOR_DEFAULT);
        SetLocalInt(oTrigger, TRIGGER_ROOM_TEXT, 0);
    }

}

void UI_DisplayXPFloaty(object oTarget, int nXP)
{
    string s = IntToString(nXP);

    DisplayFloatyMessage(oTarget,  s + " " + GetStringByStringId(STRING_ID_XP_FLOATY), FLOATY_MESSAGE, UI_DISPLAY_COLOR_XP, UI_DISPLAY_DURATION_XP);
}</text>
	</Agent>
</Resource>