<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="3237" Folder="\_Game Effects\Effects\" ResRefName="effect_confusion_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\effect_confusion_h.nss?moduleid=1&amp;resrefid=3237" Requested="0">
	<Agent type="empty">
		<ResRefName>effect_confusion_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>//void main() {} // FOR DEBUG ONLY! MUST ALWAYS BE COMMENTED OUT!
// -----------------------------------------------------------------------------------------------------------------------------------------------------
// effect_confussion_h
// -----------------------------------------------------------------------------
/*
    Effect: Confusion

*/
// -----------------------------------------------------------------------------
// Owner: Austin Peckenpaugh
// -----------------------------------------------------------------------------


#include "log_h"
#include "core_h"
#include "effect_constants_h"
#include "effect_death_h"
#include "2da_data_h"
#include "wrappers_h"
#include "effect_upkeep_h"
#include "ai_threat_h"
#include "sys_resistances_h"

const int CONFUSION_GROUP_1 = 5056;
const int CONFUSION_GROUP_2 = 5057;
const int CONFUSION_GROUP_3 = 5058;
const int CONFUSION_GROUP_4 = 5059;
const int CONFUSION_GROUP_5 = 5060;

const float MINIMUM_MEDIUM_CUTOFF = 0.53;
const float MINIMUM_LARGE_CUTOFF = 1.401;
const int CREATURE_SIZE_SMALL = 1;
const int CREATURE_SIZE_MEDIUM = 2;
const int CREATURE_SIZE_LARGE = 3;

// return a command that make oTarget move to a random nearby place
command _MoveToRandomPlace(object oCaster, object oTarget);
command _MoveToRandomPlace(object oCaster, object oTarget)
{

    // the creature is going to randomly move to a nearby "safe" location
    location[] lLocations;

    int nLocation = 0;
    object oArea = GetArea(oTarget);

    float fX = GetPosition(oTarget).x;
    float fY = GetPosition(oTarget).y;
    float fZ = GetPosition(oTarget).z;
    location lCaster = GetSafeLocation(GetLocation(oCaster));
    location lStart = GetSafeLocation(GetLocation(oTarget));

    float fRadius = EFFECT_CONFUSION_WANDER_RADIUS;
    float fNewX = fX + (Random(2)-1)*fRadius;
    float fNewY = fY + (Random(2)-1)*fRadius;
    float fNewZ = fZ;

    vector vNewPosition = Vector(fNewX, fNewY, fNewZ);
    float fNewAngle = RandomFloat()*360;

    location lNewLocation = Location(oArea, vNewPosition, fNewAngle);

    // DEBUG information about the location. Uncomment if you are suspicious
    //    Log_Trace(LOG_CHANNEL_COMBAT_ABILITY, "EFFECT CONFUSION H",
    //                    " CORDINATES: "
    //                    + "Is ("      + ToString(GetPositionFromLocation(lNewLocation).x)
    //                    + ","       + ToString(GetPositionFromLocation(lNewLocation).y)
    //                    + ","       + ToString(GetPositionFromLocation(lNewLocation).z)
    //                    +") Was: (" + ToString(GetPositionFromLocation(lNewLocation).x)
    //                    +","        + ToString(GetPositionFromLocation(lNewLocation).y)
    //                    +","        + ToString(GetPositionFromLocation(lNewLocation).z)
    //                    +")"
    //                    , oTarget
    //                );

    // make sure the position is safe
    lNewLocation = GetSafeLocation(lNewLocation);
    if (IsLocationValid(lNewLocation) == FALSE)
    {
        lNewLocation = lStart;
        if (IsLocationValid(lNewLocation) == FALSE)
        {
            lNewLocation = lCaster;
        }
    }

    // issue the move command
    command cMove = CommandMoveToLocation(lNewLocation, FALSE);
    return cMove;

}

// Returns the creature's size based on its ring size in APR_base
int _GetCreatureSize(object oObject);
int _GetCreatureSize(object oObject)
{
    // Get creature's appearance from the 2DA APR_base
    int nAppearance = GetAppearanceType(oObject);
    float fAppearance = GetM2DAFloat(TABLE_APPEARANCE, "PERSPACE", nAppearance);
    // Depending on the creature's size (float values)
    if (fAppearance &lt; MINIMUM_MEDIUM_CUTOFF)
    {
        // Creature is small
        int nSize = CREATURE_SIZE_SMALL;
        return nSize;
    }
    else
    {
        if (fAppearance &gt;= MINIMUM_LARGE_CUTOFF)
        {
            // Creature is large
            int nSize = CREATURE_SIZE_LARGE;
            return nSize;
        }
        else
        {
            // Creature is medium
            int nSize = CREATURE_SIZE_MEDIUM;
            return nSize;
        }
    }
}

/** @brief Creates and apply a confusion effect on a creature
*
* @param oCaster - the character who created the confusion effect
* @param oTarget - the character who is affected by the confusion effect
* @param nAbility - the ability which creates the confusion effect
* @param fBaseDuration - the unmodified duration of the confusion effect. Some creatures are more affected than others
* @param nVFX - the visual effect to play on the confused creature while he is confused
* @returns the confusion effect
*/


effect ApplyConfusionEffectOnCreature(object oCaster, object oTarget, int nAbility, float fBaseDuration, int nVFX);
effect ApplyConfusionEffectOnCreature(object oCaster, object oTarget, int nAbility, float fBaseDuration, int nVFX)
{
    effect eConfusion = Effect(EFFECT_TYPE_CONFUSION);
    if ((IsEffectValid(eConfusion) == TRUE) &amp;&amp; (IsImmuneToEffectType(oTarget, EFFECT_TYPE_CONFUSION) == FALSE))
    {
        if (nVFX&gt;0)
        {
            eConfusion = SetEffectEngineInteger(eConfusion,EFFECT_INTEGER_VFX, nVFX);
        }

        if (IsDead(oTarget) == FALSE)
        {
            float fDuration;

            // confuse behave differently on party members and on NPCs
            if (IsPartyMember(oTarget) == TRUE)
            {
                fDuration = fBaseDuration;

                // confuse slow the party member and make it moves to a nearby spot in a manner
                // that the Player cannot cancel
                effect eSlow = Effect(EFFECT_TYPE_MOVEMENT_RATE);
                eSlow = SetEffectEngineFloat(eSlow, EFFECT_FLOAT_POTENCY, 0.5);
                ApplyEffectOnObject(EFFECT_DURATION_TYPE_TEMPORARY, eSlow, oTarget, fBaseDuration/2, oCaster, nAbility);

                command cMove = _MoveToRandomPlace(oCaster, oTarget);
                AddCommand(oTarget, cMove, TRUE, TRUE);

            }
            else
            {
                // adjust duration based on creature "rank"
                fDuration = GetRankAdjustedEffectDuration(oTarget, fBaseDuration);

                // save the real group ID of the target. This will be used if the target group is modified
                int nGroup = GetGroupId(oTarget);
                eConfusion = SetEffectInteger(eConfusion, EFFECT_CONFUSION_EFFECT_INTEGER_INDEX, nGroup);



                // Removed: Random chance to turn on his friends and join a random group ID
                // int nAttackFriendChance     = FloatToInt(GetRankAdjustedEffectDuration(oTarget, 1.0) * EFFECT_CONFUSION_SWITCH_FACTION_PERCENTAGE);
                // int nRandom;
                // nRandom = Random(100)+1;


                if (TRUE) // (nRandom &lt;= nAttackFriendChance)
                {
                    int nConfusionGroupID;
                    int nRandomID = Random(5);
                    switch (nRandomID)
                    {
                        case 0:
                        {
                            nConfusionGroupID = CONFUSION_GROUP_1;
                        }
                        break;
                        case 1:
                        {
                            nConfusionGroupID = CONFUSION_GROUP_2;
                        }
                        break;
                        case 2:
                        {
                            nConfusionGroupID = CONFUSION_GROUP_3;
                        }
                        break;
                        case 3:
                        {
                            nConfusionGroupID = CONFUSION_GROUP_4;
                        }
                        break;
                        case 4:
                        {
                            nConfusionGroupID = CONFUSION_GROUP_5;
                        }
                        break;
                    }

                    SetGroupHostility(CONFUSION_GROUP_1, CONFUSION_GROUP_2, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_1, CONFUSION_GROUP_3, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_1, CONFUSION_GROUP_4, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_1, CONFUSION_GROUP_5, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_2, CONFUSION_GROUP_3, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_2, CONFUSION_GROUP_4, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_2, CONFUSION_GROUP_5, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_3, CONFUSION_GROUP_4, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_3, CONFUSION_GROUP_5, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_4, CONFUSION_GROUP_5, TRUE);

                    SetGroupHostility(CONFUSION_GROUP_1, GROUP_HOSTILE, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_2, GROUP_HOSTILE, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_3, GROUP_HOSTILE, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_4, GROUP_HOSTILE, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_5, GROUP_HOSTILE, TRUE);

                    SetGroupHostility(CONFUSION_GROUP_1, GROUP_PC, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_2, GROUP_PC, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_3, GROUP_PC, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_4, GROUP_PC, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_5, GROUP_PC, TRUE);

                  /*  SetGroupHostility(CONFUSION_GROUP_1, GROUP_FRIENDLY, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_2, GROUP_FRIENDLY, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_3, GROUP_FRIENDLY, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_4, GROUP_FRIENDLY, TRUE);
                    SetGroupHostility(CONFUSION_GROUP_5, GROUP_FRIENDLY, TRUE); */
                    // -------------------------------------------------


                    // Set the target's group ID to the randomly chosen group number
                    SetGroupId(oTarget, nConfusionGroupID);
                    LogTrace(LOG_CHANNEL_REWARDS, ToString(oTarget) +" belongs to group " +ToString(nConfusionGroupID));

                    // clear threats
                    //ClearThreatTable(oTarget); // make me forget who I hate
                    ClearAllCommands(oTarget); // stop what I was doing


                    // Get a target and attack it - this is not 100% needed but give much better results
                    // and allow us to handle the case of the mob still wanting to beat down on a party member
                    object []oThreats = GetNearestObjectByHostility(oTarget, TRUE, OBJECT_TYPE_CREATURE, 1, 1, 1);
                    object oThreat = oThreats[0];

                    AI_Threat_SetThreatTarget(oTarget, oThreat);

                    if (IsPartyMember(oThreat) == TRUE)
                    {
                        // if the creature is still targetting a party member, add a
                        // bit of slow and random move to make the spell more useful

                        effect eSlow = Effect(EFFECT_TYPE_MOVEMENT_RATE);
                        eSlow = SetEffectEngineFloat(eSlow, EFFECT_FLOAT_POTENCY, 0.5);
                        ApplyEffectOnObject(EFFECT_DURATION_TYPE_TEMPORARY, eSlow, oTarget, fDuration/4, oCaster, nAbility);

                        command cPreMoveAnim = CommandPlayAnimation(EFFECT_CONFUSION_ANIMATION_ID, 1);
                        command cMove = _MoveToRandomPlace(oCaster, oTarget);
                        command cPostMoveAnim = CommandPlayAnimation(EFFECT_CONFUSION_ANIMATION_ID, 1);

                        // this works well, however dead enemy will finish playing daze animation before falling to the ground
                        AddCommand(oTarget, cPostMoveAnim, FALSE, TRUE);
                        AddCommand(oTarget, cMove, FALSE, TRUE);
                        AddCommand(oTarget, cPreMoveAnim, FALSE, TRUE);    // was FALSE TRUE

                    }
                }
            }

            // Apply confusion effect proper
            ApplyEffectOnObject(EFFECT_DURATION_TYPE_TEMPORARY, eConfusion, oTarget, fDuration, oCaster, nAbility);

            // apply DAZE VFX - this is common to all confusion effect regardless of its nature (e.g. bard 'confuse' versus 'waking nightmare' confuse)
            ApplyEffectVisualEffect(oCaster, oTarget, EFFECT_CONFUSION_DAZE_VFX, EFFECT_DURATION_TYPE_TEMPORARY, fDuration, nAbility);
        }
    }
    else
    {
        Log_Trace(LOG_CHANNEL_EFFECTS,"ApplyConfusion","$$$ Effect not valid; target is immune");
    }
    return eConfusion;
}


///////////////////////////////////////////////////////////////////////////////
//  Effects_HandleApplyEffectConfusion
///////////////////////////////////////////////////////////////////////////////
//  Created By: Austin Peckenpaugh
//  Created On: Oct 2008
///////////////////////////////////////////////////////////////////////////////
int Effects_HandleApplyEffectConfusion(effect eEffect)
{
    //Do not apply confusion if already confused
    int nArraySize = GetArraySize(GetEffects(OBJECT_SELF, EFFECT_TYPE_CONFUSION));
    if (nArraySize &gt; 0  /*this includes this effect */ )
    {
        Log_Trace(LOG_CHANNEL_EFFECTS,"ApplyConfusion","Not applying confusion because target is already confused! ArraySize is "+ToString(nArraySize));
        return FALSE;
    }
    else
    {
        Log_Trace(LOG_CHANNEL_EFFECTS,"ApplyConfusion","Applying confusion! ArraySize is "+ToString(nArraySize));
    }
    return TRUE;
}

///////////////////////////////////////////////////////////////////////////////
//  Effects_HandleRemoveEffectConfusion
///////////////////////////////////////////////////////////////////////////////
//  Created By: Austin Peckenpaugh
//  Created On: Oct 2008
///////////////////////////////////////////////////////////////////////////////
int Effects_HandleRemoveEffectConfusion(effect eEffect)
{
    //On removal, reassociate threat with caster
    object oCreature = OBJECT_SELF;

    int nRealGroupId = GetEffectInteger(eEffect,EFFECT_CONFUSION_EFFECT_INTEGER_INDEX);
    Log_Trace(LOG_CHANNEL_COMBAT_ABILITY,"EFFECT CONFUSION H"," Effect Int stop: "+ ToString(nRealGroupId));

    if (nRealGroupId != 0)
    {
        int nCurrentGroupId = GetGroupId(OBJECT_SELF);

        // only change group id if it's one of the confusion groups. otherwise it got overridden during the
        // effect duration from script and should not be touched, period.
        if (nCurrentGroupId == CONFUSION_GROUP_1 ||
            nCurrentGroupId == CONFUSION_GROUP_2 ||
            nCurrentGroupId == CONFUSION_GROUP_3 ||
            nCurrentGroupId == CONFUSION_GROUP_4 ||
            nCurrentGroupId == CONFUSION_GROUP_5)
        {
            SetGroupId(oCreature, nRealGroupId);
        }
    }
    //ClearThreatTable(oCreature); // make me forget who I hate
    AI_Threat_UpdateEnemyAppeared(oCreature, GetEffectCreator(eEffect));

    Log_Trace(LOG_CHANNEL_EFFECTS,"effect_confusion_h.HandleRemoveEffectConfusion","Confusion removed from "+ToString(oCreature));

    return TRUE;
}

int Effects_HandleConfusionCallback(object oCreature)
{
    return TRUE;
}</text>
	</Agent>
</Resource>