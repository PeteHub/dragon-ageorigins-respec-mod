<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="796" Folder="\_Game Effects\Effects\" ResRefName="effect_disease_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\effect_disease_h.nss?moduleid=1&amp;resrefid=796" Requested="0">
	<Agent type="empty">
		<ResRefName>effect_disease_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>//==============================================================================
// effect_disease_h
//------------------------------------------------------------------------------
/*

    Effect: Disease

        When applied to an object, this effect applies a disease to the object.
        This Disease has a sub-effect which will also be applied and removed
        with the disease itself.

*/
//------------------------------------------------------------------------------
// Created By: Joshua Stiksma
// Created On: January 16, 2007
//==============================================================================

#include "2da_constants_h"
#include "log_h"

//==============================================================================
// CONSTANTS
//==============================================================================

const string    DISEASE_2DA_EFFECT          = "effect";
const string    DISEASE_2DA_INT0            = "effect_int1";
const string    DISEASE_2DA_INT1            = "effect_int2";
const string    DISEASE_2DA_FLOAT0          = "effect_float1";
const string    DISEASE_2DA_FLOAT1          = "effect_float2";



//==============================================================================
// FUNCTION DECLARATIONS
//==============================================================================

/** @brief Returns an effect which diseases an object it is applied to.
*
* Returns a Disease Effect which may be applied to a creature to disease it.
* The Effects of the Diseases are defined in the Disease 2DA (disease.xls)
*
* @param nDisease the ID of the Disease Effect to return.
* @return a valid effect of type EFFECT_TYPE_DISEASE.
* @author joshua
*/
effect EffectDisease( int nDiseaseID );

/** @brief Handles applying a Disease effect to a creature
* @param eEffect the Disease effect to apply
* @return TRUE if effect was applied successfully; otherwise FALSE
* @author joshua
*/
int Effects_HandleApplyEffectDisease( effect eEffect );

/** @brief Handles removing a Disease effect to a creature
* @param eEffect the Disease effect to remove
* @return TRUE if effect was removed successfully; otherwise FALSE
* @author joshua
*/
int Effects_HandleRemoveEffectDisease( effect eEffect );



//==============================================================================
// FUNCTION DEFINITIONS
//------------------------------------------------------------------------------
// _CreateDiseaseSubEffect
//------------------------------------------------------------------------------

effect _CreateDiseaseSubEffect( effect eEffect, int nDiseaseID )
{

    int         nEffect;
    int         nInt0;
    int         nInt1;
    float       fFloat0;
    float       fFloat1;
    effect      eSubEffect;

    //--------------------------------------------------------------------------

    nEffect    = GetM2DAInt( TABLE_RULES_DISEASES, DISEASE_2DA_EFFECT, nDiseaseID );
    nInt0      = GetM2DAInt( TABLE_RULES_DISEASES, DISEASE_2DA_INT0, nDiseaseID );
    nInt1      = GetM2DAInt( TABLE_RULES_DISEASES, DISEASE_2DA_INT1, nDiseaseID );
    fFloat0    = GetM2DAFloat( TABLE_RULES_DISEASES, DISEASE_2DA_FLOAT0, nDiseaseID );
    fFloat1    = GetM2DAFloat( TABLE_RULES_DISEASES, DISEASE_2DA_FLOAT1, nDiseaseID );
    eSubEffect = Effect( nEffect );

    //--------------------------------------------------------------------------

    eSubEffect = SetEffectInteger( eSubEffect, 0, nInt0 );
    eSubEffect = SetEffectInteger( eSubEffect, 1, nInt1 );
    eSubEffect = SetEffectInteger( eSubEffect, 2, GetEffectID(eEffect) );
    eSubEffect = SetEffectFloat( eSubEffect, 0, fFloat0 );
    eSubEffect = SetEffectFloat( eSubEffect, 1, fFloat1 );

    return eSubEffect;

}

//------------------------------------------------------------------------------
// _DestroyDiseaseSubEffect
//------------------------------------------------------------------------------

int _DestroyDiseaseSubEffect( effect eEffect, int nDiseaseID )
{

    int         nIndex;
    int         nArraySize;
    int         nEffect;
    int         nInt0;
    int         nInt1;
    float       fFloat0;
    float       fFloat1;
    object      oEffectCreator;
    effect []   arSubEffects;

    //--------------------------------------------------------------------------

    nEffect         = GetM2DAInt( TABLE_RULES_DISEASES, DISEASE_2DA_EFFECT, nDiseaseID );
    nInt0           = GetM2DAInt( TABLE_RULES_DISEASES, DISEASE_2DA_INT0, nDiseaseID );
    nInt1           = GetM2DAInt( TABLE_RULES_DISEASES, DISEASE_2DA_INT1, nDiseaseID );
    fFloat0         = GetM2DAFloat( TABLE_RULES_DISEASES, DISEASE_2DA_FLOAT0, nDiseaseID );
    fFloat1         = GetM2DAFloat( TABLE_RULES_DISEASES, DISEASE_2DA_FLOAT1, nDiseaseID );
    oEffectCreator  = GetEffectCreator( eEffect );
    arSubEffects    = GetEffects( oEffectCreator, nEffect );
    nArraySize      = GetArraySize( arSubEffects );

    for ( nIndex = 0; nIndex &lt; nArraySize; nIndex++ )
    {
        if ( GetEffectInteger(arSubEffects[nIndex],0)   == nInt0 &amp;&amp;
             GetEffectInteger(arSubEffects[nIndex],1)   == nInt1 &amp;&amp;
             GetEffectFloat(arSubEffects[nIndex],0)     == fFloat0 &amp;&amp;
             GetEffectFloat(arSubEffects[nIndex],1)     == fFloat1 &amp;&amp;
             GetEffectInteger(arSubEffects[nIndex],2)   == GetEffectID(eEffect)
            )
        {
            RemoveEffect( oEffectCreator, arSubEffects[nIndex] );
            return TRUE;
        }
    }

    return FALSE;

}

//------------------------------------------------------------------------------
// EffectDisease
//------------------------------------------------------------------------------

effect EffectDisease( int nDiseaseID )
{

    effect      eDisease;

    //--------------------------------------------------------------------------

    eDisease = Effect( EFFECT_TYPE_DISEASE );
    eDisease = SetEffectInteger( eDisease, 0, nDiseaseID );

    //--------------------------------------------------------------------------

    return eDisease;

}

//------------------------------------------------------------------------------
// Effects_HandleApplyEffectDisease
//------------------------------------------------------------------------------

int Effects_HandleApplyEffectDisease( effect eEffect )
{

    int         nIndex;
    int         nArraySize;
    int         nDiseaseID;
    int         nDiseaseCount;
    effect      eSubEffect;
    effect []   arDiseaseEffects;
    object      oEffectCreator;

    //--------------------------------------------------------------------------

    nDiseaseID       = GetEffectInteger( eEffect, 0 );
    nDiseaseCount    = 0;
    oEffectCreator   = GetEffectCreator(eEffect);
    arDiseaseEffects = GetEffects( oEffectCreator, EFFECT_TYPE_DISEASE );
    nArraySize       = GetArraySize( arDiseaseEffects );
    eSubEffect       = _CreateDiseaseSubEffect( eEffect, nDiseaseID );

    //--------------------------------------------------------------------------

    Log_Trace( LOG_CHANNEL_EFFECTS,"effect_disease_h.Effects_HandleApplyEffectDisease","" );

    // Check if effect already exists
    for ( nIndex = 0; nIndex &lt; nArraySize; nIndex++ )
    {
        if ( GetEffectInteger(arDiseaseEffects[nIndex],0) == nDiseaseID )
            nDiseaseCount++;
    }

    // We check if there are 2 or more because this handler is called AFTER
    // the effect is applied. Returning FALSE will remove the one that was
    // added.
    if ( nDiseaseCount &gt; 1 )
        return FALSE;

    // Apply sub-effect from 2DA
    Engine_ApplyEffectOnObject( EFFECT_DURATION_TYPE_PERMANENT, eSubEffect, oEffectCreator,
                                0.0f, oEffectCreator );

    return TRUE;

}

//------------------------------------------------------------------------------
// Effects_HandleRemoveEffectDisease
//------------------------------------------------------------------------------

int Effects_HandleRemoveEffectDisease( effect eEffect )
{

    int         nDiseaseID;

    //--------------------------------------------------------------------------

    nDiseaseID = GetEffectInteger( eEffect, 0 );

    //--------------------------------------------------------------------------

    Log_Trace( LOG_CHANNEL_EFFECTS, "effect_disease_h.Effects_HandleRemoveEffectDisease", "" );

    // Remove any possible sub-effects of the disease
    if ( !_DestroyDiseaseSubEffect( eEffect, nDiseaseID) )
        return FALSE;

    return TRUE;

}</text>
	</Agent>
</Resource>