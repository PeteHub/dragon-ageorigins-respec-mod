<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="121" Folder="\_Game Effects\Effects\" ResRefName="effect_root_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\effect_root_h.nss?moduleid=1&amp;resrefid=121" Requested="0">
	<Agent type="empty">
		<ResRefName>effect_root_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>// -----------------------------------------------------------------------------
// effect_root_h
// -----------------------------------------------------------------------------
/*
    Effect Root

    When applied to an object, this applies effect root to that object. It also
    increments the stationary AI counter of that object by 2. When removed, it
    decrements that counter. This should allow creature AI to handle the root
    with issue, and will handle the case of creatures being manually set to
    stationary who are then affected by this. The reason this value is set to
    2 is so it bypasses the existing functionality of the counter being set to
    1. When the stationary ai flag is 1, the creature will resume moving when
    hit. Incrementing and decrementing by 2 bypasses this, preserving its effect.
*/
// -----------------------------------------------------------------------------
// Owner: Georg Zoeller
// -----------------------------------------------------------------------------

/** @brief Returns an effect which Paralyzes a creature
* @author Georg Zoeller
*
* @return a valid effect of type EFFECT_TYPE_Paralyze.
*/

#include "effect_constants_h"
#include "log_h"
effect EffectRoot();
effect EffectRoot()
{
    return Effect(EFFECT_TYPE_ROOT);
}



int Effects_HandleApplyEffectRoot(effect eEffect)
{
    // increment stationary counter
    int nStationaryFlag = GetLocalInt(OBJECT_SELF, AI_FLAG_STATIONARY);
    LogTrace(LOG_CHANNEL_EFFECTS, "Stationary AI Flag = " + ToString(nStationaryFlag), OBJECT_SELF);
    nStationaryFlag += 2;
    LogTrace(LOG_CHANNEL_EFFECTS, "Altered Stationary AI Flag = " + ToString(nStationaryFlag), OBJECT_SELF);
    SetLocalInt(OBJECT_SELF, AI_FLAG_STATIONARY, nStationaryFlag);

    return   TRUE;
}

int Effects_HandleRemoveEffectRoot(effect eEffect)
{
    // decrement stationary counter
    int nStationaryFlag = GetLocalInt(OBJECT_SELF, AI_FLAG_STATIONARY);
    LogTrace(LOG_CHANNEL_EFFECTS, "Stationary AI Flag = " + ToString(nStationaryFlag), OBJECT_SELF);
    nStationaryFlag -= 2;
    
    // make sure it doesn't go below 0
    if (nStationaryFlag &lt; 0)
    {
        nStationaryFlag = 0;
    }
    
    LogTrace(LOG_CHANNEL_EFFECTS, "Altered Stationary AI Flag = " + ToString(nStationaryFlag), OBJECT_SELF);
    SetLocalInt(OBJECT_SELF, AI_FLAG_STATIONARY, nStationaryFlag);

    return TRUE;
}</text>
	</Agent>
</Resource>