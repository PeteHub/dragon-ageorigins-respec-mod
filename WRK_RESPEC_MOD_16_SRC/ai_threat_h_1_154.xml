<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="154" Folder="\_Core Includes\" ResRefName="ai_threat_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\ai_threat_h.nss?moduleid=1&amp;resrefid=154" Requested="0">
	<Agent type="empty">
		<ResRefName>ai_threat_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>//////////////////////////////////////////////
// ai_threat_h
//
// This script includes all Threat AI functions
//
// Owner: Yaron Jakobs
//
/////////////////////////////////////////////

/** @addtogroup scripting_threat Scripting AI Threat handling
*
* Scripting AI Threat handling
*/
/** @{*/

//#include "ai_threat_engine_h"
#include "var_constants_h"
#include "log_h"
#include "core_h"
#include "wrappers_h"
#include "core_difficulty_h"

// Constant
const int AI_THREAT_SIZE = 5;                           // Max number of creatures in threat list
const float AI_THREAT_MIN = 0.0;                        // Min threat value
const float AI_THREAT_MAX = 1000.0;                       // Max threat value
const float AI_THREAT_DISSOLVE = -0.5;                    // Amount of threat lowered each second
const float AI_THREAT_ROGUE_DAMAGE_RATIO = 0.8;         // rogues takes less threat from damage
const float AI_THREAT_VALUE_DIRECT_DAMAGE = 1.0;        // Multiplier for damage threat
const float AI_THREAT_VALUE_DIRECT_HEALING = 1.0;       // Multiplier for healing threat
const float AI_THREAT_VALUE_ALLY_DAMAGE = 0.5;          // Multiplier for ally damage threat
const float AI_THREAT_VALUE_ATTACKED = 1.0;             // A constant value of threat to apply only when being attacked
const float AI_THREAT_VALUE_ENEMY_PERCEIVED = 10.0;     // A max setting for a random value that is set when first perceived a hostile enemy
const float AI_THREAT_PERCEIVED_ARMOR_LIGHT = 5.0;       // A constant value to add to perception threat when perceiving someone in light armor
const float AI_THREAT_PERCEIVED_ARMOR_MEDIUM = 10.0;       // A constant value to add to perception threat when perceiving someone in light armor
const float AI_THREAT_PERCEIVED_ARMOR_HEAVY = 10.0;       // A constant value to add to perception threat when perceiving someone in light armor
const float AI_THREAT_PERCEIVED_ARMOR_MASSIVE = 10.0;       // A constant value to add to perception threat when perceiving someone in light armor
const float AI_THREAT_PERCEIVED_WEAPON_MELEE = 5.0;    // A constant value to add to perception threat
const float AI_THREAT_HATED_ENEMY_COEFFICIENT = 2.0;    // Multiply any threat chance by this value if coming from a hated target
const float AI_THREAT_ABILITY_USE_THREAT_COEFF = 2.0;         // The amount of threat per point assigned to the ability to apply when the ability is fired
const float AI_THREAT_ABILITY_IMPACT_THREAT_COEFF = 10.0;      // The amount of threat per point assign to the ability to apply when the ability hits the target
const int AI_THREAT_SWITCH_TIMER_JUMP = 5;               // The amount of seconds the switch timer increases each time there is a switch
const int AI_THREAT_SWITCH_TIME_MAX = 25;               // The maximum amount of switch timer. The timer revers to 0 afterwards
const float AI_THREAT_MIN_CHANGE = 1.0;                 // The minimum value of each threat change
const float AI_THREAT_PASSIVE_RANGE = 30.0;              // The range other creatures need to be in order to hate something that happens in the middle of that area
const int AI_THREAT_CHANCE_KEEP_TARGET_20_HEALTH = 50; // the chance to keep the current target if it has 20% or less health (on top of other timer restrictions)
const int AI_THREAT_CHANCE_KEEP_TARGET_10_HEALTH = 90; // the chance to keep the current target is it has 10% or less health (on top of other timer restrictions)
const float AI_THREAT_CANT_ATTACK_TARGET_REDUCTION = 0.75;  // how much  to reduce the threat if can't attack the target
const float AI_THREAT_NON_DAMAGING_AOE_EXTRA = 20.0; // extra threat fired when enemies go on non-hostile AOE and only on hard difficulty.


// switch check
int AI_Threat_ClearToSwitchTarget(object oCreature);

/** @brief Returns most hated enemy
*
* This function is the main interface for the threat system. It will mostly return
* the most hated enemy, but it sometimes can be not the most hated (to avoid too many target switching)
*
* @param oCreature the creature for which we need a target for
* @param bUpdateThreatTarget whether or not to update the threat target during the check
* @returns most hated enemy
* @author Yaron
*/
object AI_Threat_GetThreatTarget(object oCreature, int bUpdateThreatTarget = TRUE);

/** @brief Updates threat based on damage inflicted
*
* The threat is updated for the damaged creature
* The exact amount of threat is based on the relative damage done. For example:
* If someone has a maximum health of 100 and it was damaged for 50 HP, the generated
* basic threat will be equal to 50 (for 50%) - multiplied by the global coefficient.
* NOTE: currently not updating threat for allies (it is not easy to retreive the list of allies)
*
* @param oCreature the creature being damaged
* @param oAttacker the attacking creature doing the damage
* @param nDamage the amount of damage inflicted
* @author Yaron
*/
void AI_Threat_UpdateDamage(object oCreature, object oAttacker, float fDamage);

/** @brief Updates threat based on healing
*
* Updating the threat for all enemies by creating an AOE effect around the healing
* creature. Each enemy will get the effect data and update the threat towards the healing creature.
*
* @param oCreature the creature being healed
* @param oHealer the healing creature
* @param nHealthHealed the amount of damage being healed
* @author Yaron
*/
//void AI_Threat_UpdateHealing(object oCreature, object oHealer, float fHealthHealed);

/** @brief Updates threat based on ablity impacting
*
* The threat is updated for the creature who was the impact of the ability.
* The threat change is ability-specific (Ability Impact Threat)
* This is valid only for hostile abilities and is in addition to any damage the ability may cause
*
* @param oCreature the creature being impacted by the ability
* @param oAttacker the creature using the ability
* @param nAbilityID the ability type being used
* @author Yaron
*/
void AI_Threat_UpdateAbilityImpact(object oCreature, object oAttacker, int nAbilityID);

/** @brief Updates threat based on ablity used
*
* Updating the threat for all enemies by creating an AOE effect around the creature using the ability.
* Each enemy will get the effect data and update the threat towards the creature using the ability.
*
* The threat change is ability-specific (Ability Use Threat)
*
* @param oCreature the creature using the ability
* @param nAbilityID the ability type being used
* @author Yaron
*/
//void AI_Threat_UpdateAbilityUsed(object oCreature, int nAbilityID);


/** @brief Updates threat based perceiving a creature
*
* Update the threat for the current creature based on the enemy that was perceived.
*
* @param oCreature the creature perceiving the enemy
* @param oEnemy the hostile creature by perceived by oCreature
* @author Yaron
*/
void AI_Threat_UpdateEnemyAppeared(object oCreature, object oEnemy);

/** @brief Updates threat based on losing sight of a creature
*
* Remove the enemy creature from the current creature's threat list and remove the current creature
* from the enemie's inverse threat list.
*
* @param oCreature the creature perceiving the enemy
* @param oEnemy the hostile creature by perceived by oCreature
* @author Yaron
*/
void AI_Threat_UpdateEnemyDisappeared(object oCreature, object oEnemy);

/** @brief Updates threat based on a creature attacking
*
* Update the threat for the current creature based on the attacking enemy.
*
* @param oCreature the creature perceiving the enemy
* @param oAttacker the hostile creature attacking oCreature
* @author Yaron
*/
void AI_Threat_UpdateEnemyAttacked(object oCreature, object oAttacker);

/** @brief Updates threat based on a creature dying
*
* This function clears the dead creature's threat list.
* Any other creatures that have this creature in their threat list are clearing it out on the disappear event.
*
* @param oDeadCreature the dead creature
* @author Yaron
*/
void AI_Threat_UpdateDeath(object oDeadCreature);

/** @brief returns updates threat value based on hated targets
*
* If the creature hates the threat target because of race, gender or class - the threat may increase.
*
* @param oCreature the hating creature
* @param oThreatTarget the hated creature
* @param fThreat the threat before being changed
* @returns the updated threat, if any, based on hated target
* @author Yaron
*/
float AI_Threat_GetHatedThreat(object oCreature, object oThreatTarget, float fThreat);

/** @brief Handle the update of threat for a single creature
*
* Do any global handling and call the engine function that handles most of the logic
*
* @param oCreature the hating creature
* @param oEnemy the hated creature
* @param fThreatChange the threat before being changed
* @author Yaron
*/
void AI_Threat_UpdateCreatureThreat(object oCreature, object oEnemy, float fThreatChange);

// Returns the 2da value for ability threat impact
float AI_Threat_GetAbilityImpactThreat(int nAbilityID);

// Returns the 2da value for ability threat use
float AI_Threat_GetAbilityUseThreat(int nAbilityID);

// Updated the threat target for oCreature
void AI_Threat_SetThreatTarget(object oCreature, object oTarget);

// Returns TRUE if this target should be kept, on top of any other threat rules
int AI_Threat_KeepWoundedTarget(object oTarget);

// Clears the creature's threat from all of his enemies. This is used when the creature
// acquires effects like root or sleep that should make enemies stop attacking this creature
void AI_Threat_ClearEnemiesThreatToMe(object oCreature);


// This is fired when a stantionary creature is trying to attack a target that is beyond the range of his
// abilities or with no line of sight.
void AI_Threat_UpdateCantAttackTarget(object oCreature, object oTarget);

void AI_Threat_Display(object oCreature, string sMes);

object AI_Threat_GetThreatTarget(object oCreature, int bUpdateThreatTarget = TRUE)
{
    if(bUpdateThreatTarget)
        AI_Threat_UpdateCreatureThreat(oCreature, OBJECT_INVALID, 0.0);
    object oTarget = GetLocalObject(oCreature, AI_THREAT_TARGET);
    if(IsObjectValid(oTarget) &amp;&amp;
        (IsDead(oTarget) || IsDying(oTarget) || !IsPerceiving(oCreature, oTarget)))
    {
        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_GetThreatTarget", "ERROR: threat target is dead, dying or not perceived! (" + GetTag(oTarget) + ")", LOG_SEVERITY_CRITICAL);
        #endif
        if(bUpdateThreatTarget)
            AI_Threat_UpdateCreatureThreat(oCreature, OBJECT_INVALID, 0.0);
    }
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_GetThreatTarget", "Threat Target: " + GetTag(oTarget));
    #endif
    return oTarget;
}

void AI_Threat_SetThreatTarget(object oCreature, object oTarget)
{
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_SetThreatTarget", "New threat target: " + GetTag(oTarget));
    AI_Threat_Display(oCreature, "Before setting threat target");
    #endif
    SetLocalObject(oCreature, AI_THREAT_TARGET, oTarget);
    #ifdef DEBUG
    AI_Threat_Display(oCreature, "After setting threat target");
    #endif
}

void AI_Threat_UpdateDamage(object oCreature, object oAttacker, float fDamage)
{
    if(!IsObjectHostile(oCreature, oAttacker))
        return; // doing nothing if both objects are not hostile towards each other
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateDamage", "Attacker:" + GetTag(oAttacker) + ", Damage: " + FloatToString(fDamage));
    AI_Threat_Display(oCreature, "damage update before changing threat");
    #endif
    float fMaxHealth = GetMaxHealth(oCreature);
    if(fMaxHealth == 0.0)
    {
        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_UpdateDamage", "Max Health is 0!", LOG_SEVERITY_CRITICAL);
        #endif
        return; // Do nothing - this should not happen
    }

    float fThreatChange = fDamage / fMaxHealth * 100.0 * AI_THREAT_VALUE_DIRECT_DAMAGE;

    // if rogue - less threat
    if(GetCreatureCoreClass(oAttacker) == CLASS_ROGUE)
        fThreatChange *= 0.8;


    // -------------------------------------------------------------------------
    // Threaten.
    // The presence of the threaten ability increases the amount of threat
    // generated from damage by 20%. This allows warriors to maintain hate
    // more effectively
    // Edit (yaron) feb 6, 2009: increasing to 100%
    // -------------------------------------------------------------------------
    if (IsModalAbilityActive(oAttacker, ABILITY_TALENT_THREATEN))
    {
        fThreatChange *= 2.0;
    }


    AI_Threat_UpdateCreatureThreat(oCreature, oAttacker, fThreatChange);
}


void AI_Threat_UpdateAbilityImpact(object oCreature, object oAttacker, int nAbilityID)
{
    if(!IsObjectHostile(oCreature, oAttacker))
        return; // doing nothing if both objects are not hostile towards each other
    #ifdef DEBUG
    AI_Threat_Display(oCreature, "ability impact before changing threat");
    Log_Trace_Threat("AI_Threat_UpdateAbilityImpact", "Attacker:" + GetTag(oAttacker) + ", Ability: " + IntToString(nAbilityID));
    #endif

    float fThreatChange = AI_Threat_GetAbilityImpactThreat(nAbilityID) * AI_THREAT_ABILITY_IMPACT_THREAT_COEFF;

    if(nAbilityID == ABILITY_SPELL_WALKING_BOMB &amp;&amp; GetGameDifficulty() &gt;= 2)
        fThreatChange *= 2.0; // Georg is a bastard...

    AI_Threat_UpdateCreatureThreat(oCreature, oAttacker, fThreatChange);
}

/*void AI_Threat_UpdateAbilityUsed(object oCaster, int nAbilityID)
{
    Log_Trace_Threat("AI_Threat_UpdateAbilityUsed", "Caster:" + GetTag(oCaster) + ", Ability: " + IntToString(nAbilityID));

    float fThreatChange = AI_Threat_GetAbilityUseThreat(nAbilityID);

    object[] arEnemies = GetObjectsInShape(OBJECT_TYPE_CREATURE, SHAPE_SPHERE, GetLocation(OBJECT_SELF), AI_THREAT_PASSIVE_RANGE);
    int nSize = GetArraySize(arEnemies);
    int i;
    object oCurrent;
    for(i = 0; i &lt; nSize; i++)
    {
        oCurrent = arEnemies[i];
        if(GetCombatState(oCurrent) == TRUE &amp;&amp; IsObjectHostile(OBJECT_SELF, oCurrent) &amp;&amp; IsPerceiving(oCurrent, OBJECT_SELF))
        {
            AI_Threat_UpdateCreatureThreat(oCurrent, OBJECT_SELF, fThreatChange);
        }
    }
}*/

void AI_Threat_UpdateEnemyAppeared(object oCreature, object oEnemy)
{
    //int nMaxRand = FloatToInt(AI_THREAT_VALUE_ENEMY_PERCEIVED);
    //int nRand = Random(nMaxRand) + 1; // randomized so not the first perceived is always attacked
    //float fThreatChange = IntToFloat(nRand);
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateEnemyAppeared", "Enemy:" + GetTag(oEnemy));
    #endif

    object oChestItem = GetItemInEquipSlot(INVENTORY_SLOT_CHEST, oEnemy);
    object oWeaponItem = GetItemInEquipSlot(INVENTORY_SLOT_MAIN, oEnemy);
    int nChestItemType = GetBaseItemType(oChestItem);
    int nWeaponItemType = GetBaseItemType(oWeaponItem);
    float fThreatExtra = 0.0;
    if(GetGameDifficulty() &lt; 3) // apply this for difficulty levels lower than nightmare
    {
        switch(nChestItemType)
        {
            case BASE_ITEM_TYPE_ARMOR_LIGHT: fThreatExtra = AI_THREAT_PERCEIVED_ARMOR_LIGHT; break;
            case BASE_ITEM_TYPE_ARMOR_MEDIUM: fThreatExtra = AI_THREAT_PERCEIVED_ARMOR_MEDIUM; break;
            case BASE_ITEM_TYPE_ARMOR_HEAVY: fThreatExtra = AI_THREAT_PERCEIVED_ARMOR_HEAVY; break;
            case BASE_ITEM_TYPE_ARMOR_MASSIVE:
            case BASE_ITEM_TYPE_ARMOR_SUPERMASSIVE:
            fThreatExtra = AI_THREAT_PERCEIVED_ARMOR_MASSIVE; break;
        }
    }
    float fThreatChange = AI_THREAT_VALUE_ENEMY_PERCEIVED + fThreatExtra;

    float fMoreExtra = GetLocalFloat(oEnemy, AI_THREAT_GENERATE_EXTRA_THREAT);

    fThreatChange += fMoreExtra;

    // weapon check
    if( GetGameDifficulty() &lt; 3 &amp;&amp; // extra threat only for difficulty lower than nightmare
        nChestItemType != BASE_ITEM_TYPE_LONGBOW &amp;&amp; nChestItemType != BASE_ITEM_TYPE_SHORTBOW &amp;&amp; nChestItemType != 21
        &amp;&amp; nChestItemType != BASE_ITEM_TYPE_STAFF)
        fThreatChange += AI_THREAT_PERCEIVED_WEAPON_MELEE;

    // last - if this is a 'coward' creature, give it minimal hate
    if(GetPackageAI(oEnemy) == 10130)
        fThreatChange = 1.0;

    // Check to see if we need to do a force-target-switch-check (ClearAllCommands)
    // This is so enemies attack newly perceived party members who have higher threat while still trying to attack an
    // older target
    /*if(!IsFollower(oCreature) &amp;&amp; AI_Threat_ClearToSwitchTarget(oCreature))
    {
        object oCurrentTarget = AI_Threat_GetThreatTarget(oCreature); // current threat target
        float fCurrentTargetThreat = GetThreatValueByObjectID(oCreature, oCurrentTarget);
        Log_Trace_Threat("AI_Threat_UpdateEnemyAppeared", "Current target threat: " + FloatToString(fCurrentTargetThreat));

        if(IsObjectValid(oCurrentTarget) &amp;&amp; fThreatChange &gt; fCurrentTargetThreat)
        {
            Log_Trace_Threat("AI_Threat_UpdateEnemyAppeared", "Newly perceived creature is more threatening then existing threat target - clearing all actions");
            WR_ClearAllCommands(oCreature);
        }
    }*/

    #ifdef DEBUG
    AI_Threat_Display(oCreature, "Enemy appeared, before changing threat");
    #endif
    AI_Threat_UpdateCreatureThreat(oCreature, oEnemy, fThreatChange);
}

void AI_Threat_UpdateEnemyDisappeared(object oCreature, object oEnemy)
{
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateEnemyDisappeared", "Enemy:" + GetTag(oEnemy));
    AI_Threat_Display(oCreature, "Enemy disappeared, before changing threat");
    #endif
    ClearEnemyThreat(oCreature, oEnemy);
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateEnemyDisappeared", "ENEMY CLEARED FROM LIST");
    #endif
    // Check if the enemy was my target:
    object oCurrent = AI_Threat_GetThreatTarget(oCreature);
    object oMostHated = GetThreatEnemy(oCreature, 0);
    if(oCurrent == oEnemy)
    {
        if(IsObjectValid(oMostHated) &amp;&amp; !IsDead(oMostHated))
            AI_Threat_SetThreatTarget(oCreature, oMostHated);
        else // last enemy
            AI_Threat_SetThreatTarget(oCreature, OBJECT_INVALID);
    }
    #ifdef DEBUG
    AI_Threat_Display(oCreature, "Enemy disappeared, after clearing threat");
    #endif
}

void AI_Threat_UpdateEnemyAttacked(object oCreature, object oAttacker)
{
    // Updating 'attacked threat' only if threat towards the target is lower
    // or equal to 'attacked threat' value. This is done in order to prevent
    // adding the 'attacked threat' value again and again for each attack.
    float fAttackerThreat = GetThreatValueByObjectID(oCreature, oAttacker);
            if(fAttackerThreat &gt;= AI_THREAT_VALUE_ATTACKED)
                return; // too high to update

    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateEnemyAttacked", "Attacker:" + GetTag(oAttacker));
    AI_Threat_Display(oCreature, "Enemy attacked, before changing threat");
    #endif
    AI_Threat_UpdateCreatureThreat(oCreature, oAttacker, AI_THREAT_VALUE_ATTACKED);
}

void AI_Threat_UpdateDeath(object oDeadCreature)
{
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateDeath", "Dead Creature:" + GetTag(oDeadCreature));
    AI_Threat_Display(oDeadCreature, "update death, before clearing table");
    #endif
    ClearThreatTable(oDeadCreature);
    #ifdef DEBUG
    AI_Threat_Display(oDeadCreature, "update death, after clearing table");
    #endif
}

float AI_Threat_GetAbilityImpactThreat(int nAbilityID)
{
    return GetM2DAFloat(TABLE_ABILITIES_TALENTS, "threat_impact", nAbilityID);
}

float AI_Threat_GetAbilityUseThreat(int nAbilityID)
{
    return GetM2DAFloat(TABLE_ABILITIES_TALENTS, "threat_use", nAbilityID);
}

float AI_Threat_GetHatedThreat(object oCreature, object oThreatTarget, float fThreat)
{
    int nHatedRace = GetLocalInt(oCreature, AI_THREAT_HATED_RACE);
    int nHatedClass = GetLocalInt(oCreature, AI_THREAT_HATED_CLASS);
    int nHatedGender = GetLocalInt(oCreature, AI_THREAT_HATED_GENDER);


    if(nHatedRace == GetCreatureRacialType(oThreatTarget))
        fThreat *= AI_THREAT_HATED_ENEMY_COEFFICIENT;

    if(nHatedClass == GetCreatureCoreClass(oCreature))
        fThreat *= AI_THREAT_HATED_ENEMY_COEFFICIENT;

    if(nHatedGender == GetCreatureGender(oThreatTarget))
        fThreat *= AI_THREAT_HATED_ENEMY_COEFFICIENT;

    return fThreat;
}

void AI_Threat_UpdateCreatureThreat(object oCreature, object oEnemy, float fThreatChange)
{
    #ifdef DEBUG
    AI_Threat_Display(oCreature, "BEFORE UPDATING THREAT");
    #endif

    if(IsObjectValid(oEnemy))
    {
        if(IsDead(oEnemy)) // no threat towards dead enemy
        {
            #ifdef DEBUG
            Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Can not update threat against a dead enemy");
            #endif
            return;
        }

        if(!IsObjectHostile(oCreature, oEnemy))
            return; // doing nothing if both objects are not hostile towards each other
        fThreatChange = AI_Threat_GetHatedThreat(oCreature, oEnemy, fThreatChange);

        if(fThreatChange &gt; 0.0 &amp;&amp; fThreatChange &lt; AI_THREAT_MIN_CHANGE)
            fThreatChange = AI_THREAT_MIN_CHANGE;

        float fCurrentThreat = GetThreatValueByObjectID(oCreature, oEnemy);
        if(fThreatChange &lt; 0.0 &amp;&amp; fCurrentThreat + fThreatChange &lt;= 0.0)
            fThreatChange = (-1) * (fCurrentThreat - 1.0);

        if(fThreatChange &gt; 0.0 &amp;&amp; fCurrentThreat + fThreatChange &gt; AI_THREAT_MAX)
            fThreatChange = AI_THREAT_MAX - fCurrentThreat;

        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Enemy: " + GetTag(oEnemy) + ", Threat Change: " + FloatToString(fThreatChange));
        #endif

        UpdateThreatTable(oCreature, oEnemy, fThreatChange);

        #ifdef DEBUG
        AI_Threat_Display(oCreature, "AFTER ADDING NEW CREATURE TO TABLE");
        #endif
    }
    else
    {
        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Update check for threat target (no specific enemy)");
        #endif
    }


    // Check if we can update the threat target (if different from current)
    object oMostHated = GetThreatEnemy(oCreature, 0); // 0 is the most hated
    object oCurrentTarget = AI_Threat_GetThreatTarget(oCreature, FALSE); // current threat target
    int nNewMaxTimer;
    int nCurrentTime = GetTime();
    int nCurrentMaxTimer = GetLocalInt(oCreature, AI_THREAT_SWITCH_TIMER_MIN);

    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Most Hated: " + GetTag(oMostHated) + ", Current Target: " + GetTag(oCurrentTarget));
    #endif


    if(!IsObjectValid(oCurrentTarget)) // setting target for the first time
    {
        AI_Threat_SetThreatTarget(oCreature, oMostHated);
        SetLocalInt(oCreature, AI_THREAT_TARGET_SWITCH_COUNTER, GetTime());
    }
    else if(oMostHated != oCurrentTarget) // if they are different - try to update threat target to be most hated
    {
        // After the first switch - set a timer great then 0 (it was 0 until now to allow initial quick switching)

        // Check if to keep wounded target
        if(IsObjectValid(oEnemy) &amp;&amp; AI_Threat_KeepWoundedTarget(oEnemy))
        {
            #ifdef DEBUG
            Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Keeping wounded target (not checking any other threat rules)");
            #endif
        }
        else // target not wounded enough, or decided not to keep it
        {
            if(AI_Threat_ClearToSwitchTarget(oCreature) || !IsPerceiving(OBJECT_SELF, oCurrentTarget) || IsDead(oCurrentTarget) || IsDying(oCurrentTarget))
            {
                #ifdef DEBUG
                Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Clear to switch threat target");
                #endif
                // init timer
                SetLocalInt(oCreature, AI_THREAT_TARGET_SWITCH_COUNTER, nCurrentTime);
                // Update target to be the most hated target
                AI_Threat_SetThreatTarget(oCreature, oMostHated);

                nNewMaxTimer = nCurrentMaxTimer + AI_THREAT_SWITCH_TIMER_JUMP;
                if(nNewMaxTimer &gt; AI_THREAT_SWITCH_TIME_MAX)
                    nNewMaxTimer = 0;
                #ifdef DEBUG
                Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "New threat timer value: " + IntToString(nNewMaxTimer));
                #endif

                SetLocalInt(oCreature, AI_THREAT_SWITCH_TIMER_MIN, nNewMaxTimer);
            }
            else
            {
                #ifdef DEBUG
                Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "NOT Clear to switch threat target");
                #endif
            }
        }
    }

    if(IsObjectValid(oEnemy))
    {
        float fNewThreat = GetThreatValueByObjectID(oCreature, oEnemy);
        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_UpdateCreatureThreat", "Threat updated against enemy: "+ GetTag(oEnemy) +", new value: " + FloatToString(fNewThreat));
        #endif
    }
    #ifdef DEBUG
    AI_Threat_Display(oCreature, "AFTER UPDATING THREAT");
    #endif
}

int AI_Threat_KeepWoundedTarget(object oTarget)
{
    float fCurrentHealth = GetCurrentHealth(oTarget);
    float fMaxHealth = GetMaxHealth(oTarget);

    if(fMaxHealth &lt;= 0.0) fMaxHealth = 1.0;

    if(fCurrentHealth &lt; 0.0) fCurrentHealth = 0.0;

    float fHealthRatio = fCurrentHealth / fMaxHealth;
    int nRand;
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_KeepWoundedTarget", "Target health ratio:"  + FloatToString(fHealthRatio) + "%");
    #endif

    if(fHealthRatio &lt;= 0.2 &amp;&amp; fHealthRatio &gt; 0.1)
    {
        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_KeepWoundedTarget", "Target health lower than 20%, chance of keeping target:"  + IntToString(AI_THREAT_CHANCE_KEEP_TARGET_20_HEALTH) + "%");
        #endif
        nRand = Random(100) + 1;
        if(nRand &lt;= AI_THREAT_CHANCE_KEEP_TARGET_20_HEALTH)
            return TRUE;

    }
    else if(fHealthRatio &lt;= 0.1)
    {
         #ifdef DEBUG
         Log_Trace_Threat("AI_Threat_KeepWoundedTarget", "Target health lower than 10%, chance of keeping target:"  + IntToString(AI_THREAT_CHANCE_KEEP_TARGET_10_HEALTH) + "%");
         #endif
         nRand = Random(100) + 1;
         if(nRand &lt;= AI_THREAT_CHANCE_KEEP_TARGET_10_HEALTH)
            return TRUE;
    }

    return FALSE;
}

void AI_Threat_UpdateCantAttackTarget(object oCreature, object oEnemy)
{
    if(!IsObjectHostile(oCreature, oEnemy))
        return; // doing nothing if both objects are not hostile towards each other
    #ifdef DEBUG
    AI_Threat_Display(oCreature, "cant attack target before changing threat");
    Log_Trace_Threat("AI_Threat_UpdateCantAttackTarget", "oEnemy:" + GetTag(oEnemy));
    #endif

    float fThreatChange =  (-1) * GetThreatValueByObjectID(oCreature, oEnemy) * AI_THREAT_CANT_ATTACK_TARGET_REDUCTION;

    // clear the switch timer (can't attack current anyways)
    SetLocalInt(oCreature, AI_THREAT_TARGET_SWITCH_COUNTER, 0);
    AI_Threat_UpdateCreatureThreat(oCreature, oEnemy, fThreatChange);

}

void AI_Threat_Display(object oCreature, string sMes)
{
    int i;
    object oCurrent;
    Log_Trace(LOG_CHANNEL_THREAT_DATA, "THREAT DUMP", "START: " + sMes);
    object oTarget = GetLocalObject(oCreature, AI_THREAT_TARGET);

    Log_Trace(LOG_CHANNEL_THREAT_DATA, "THREAT", "CURRENT TARGET: " + GetTag(oTarget));
    int nSize = GetThreatTableSize(oCreature);
    if(nSize == 0 &amp;&amp; IsObjectValid(oTarget))
        Log_Trace(LOG_CHANNEL_THREAT_DATA, "THREAT", "ERROR! got a threat target while table is empty!");
    for(i = 0; i &lt; nSize; i++)
    {
        oCurrent = GetThreatEnemy(oCreature, i);
        Log_Trace(LOG_CHANNEL_THREAT_DATA, "THREAT", "Enemy " + IntToString(i) + ": " + GetTag(oCurrent) + ", threat: " + FloatToString(GetThreatValueByIndex(oCreature, i)));
    }
    Log_Trace(LOG_CHANNEL_THREAT_DATA, "THREAT", "END");
}

int AI_Threat_ClearToSwitchTarget(object oCreature)
{
    int nSwitchTime = GetLocalInt(oCreature, AI_THREAT_TARGET_SWITCH_COUNTER); // the time stamp when the target switched last time
    int nCurrentTime = GetTime();
    int nCurrentMaxTimer;
    if(IsUsingMeleeWeapon(oCreature))
        nCurrentMaxTimer = GetLocalInt(oCreature, AI_THREAT_SWITCH_TIMER_MIN);
    else // using ranged attack -&gt; can switch much faster
        nCurrentMaxTimer = 0;

    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_ClearToSwitchTarget", "creature: " + GetTag(oCreature) + ", current time: " + IntToString(nCurrentTime)
     + ", switch time: " + IntToString(nSwitchTime) + ", current max: " + IntToString(nCurrentMaxTimer));
    #endif

    return(nCurrentTime - nSwitchTime &gt;= nCurrentMaxTimer);
}

void AI_Threat_ClearEnemiesThreatToMe(object oCreature)
{
    #ifdef DEBUG
    Log_Trace_Threat("AI_Threat_ClearEnemiesThreatToMe", "Clearing threat of all enemies towards this creature: " + GetTag(oCreature));
    #endif

    int nEnemies = GetThreatTableSize(oCreature);
    int i;
    object oEnemy;
    float fThreat;
    for(i = 0; i &lt; nEnemies; i++)
    {
        oEnemy = GetThreatEnemy(oCreature, i);
        #ifdef DEBUG
        Log_Trace_Threat("AI_Threat_ClearEnemiesThreatToMe", "Enemy: " + GetTag(oEnemy) + " - threat set to 0 towards: " + GetTag(oCreature));
        #endif
        fThreat = GetThreatValueByObjectID(oEnemy, oCreature);
        UpdateThreatTable(oEnemy, oCreature, fThreat * -1);
        // Clearing enemy to switch target if this creature was also his threat target
        if(AI_Threat_GetThreatTarget(oEnemy, FALSE) == oCreature)
        {
            SetLocalInt(oCreature, AI_THREAT_TARGET_SWITCH_COUNTER, 0);
            #ifdef DEBUG
            Log_Trace_Threat("AI_Threat_ClearEnemiesThreatToMe", "Enemy: " + GetTag(oEnemy) + " - clearing threat timer (this creature was threat target)");
            #endif
        }
    }
}

/*void main()
{
    object oBoom = AI_Threat_GetThreatTarget(OBJECT_SELF);
    return;
}*/


/** @} */</text>
	</Agent>
</Resource>