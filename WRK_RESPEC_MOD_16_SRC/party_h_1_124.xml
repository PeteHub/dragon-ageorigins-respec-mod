<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="124" Folder="\_Core Includes\" ResRefName="party_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\party_h.nss?moduleid=1&amp;resrefid=124" Requested="0">
	<Agent type="empty">
		<ResRefName>party_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>/** @addtogroup party_systems Party Systems
*
* Includes all generic party systems
*/
/** @{*/

#include "log_h"
#include "utility_h"

#include "plt_gen00pt_party"


/** @brief Generates the initial party banter array
*
* This function generates the initial party banter array to be used to determine
* which follower will speak in the party banter dialog. The function makes a random
* list of party members, not including the main player.
*
* @author Yaron Jakobs
*/
void Party_GenerateBanterArray();

/** @brief Rotates the party members array in the banter list
*
* This function changes the order of the followers in the banter array
* to generate a different order of interactions between them when checked
* inside the party banter dialog
*
* @author Yaron Jakobs
*/
void Party_RotateBanterArray();


/** @brief Check if a specific follower is in a specific slot in the banter array
*
* The check is only for the 1st and 2nd slot - 1st for the primary speake, 2nd
* for the secondary
*
* @param oFollower the follower we are checking in the array
* @param nSlot the slot we are looking for the follower in
* @returns TRUE if the follower is in the slot, FALSE otherwise
* @author Yaron Jakobs
*/
int Party_FollowerInBanterArraySlot(object oFollower, int nSlot);


/** @brief Debug-dump of the current array and rotation counter
*
* Debug-dump of the current array and rotation counter
*
* @author Yaron Jakobs
*/
void Party_DumpPartyBanterArray();


// Returns the follower's object ID if the follower is in the active party
object Party_GetActiveFollowerByTag(string sTag);


// Returns a follower object ID if the follower is in the party (active or pool)
// or if he is in the same area (inactive)
object Party_GetFollowerByTag(string sTag);


// This function locks a plot follower into the active party. If the follower is not in the active
// party this function will clear the party, add the follower, lock it in and open the party picker
// nFollowerPartyFlag and nFollowerCampFlag are the flags used in the gen00pt_party plot for this follower
void Party_LockFollower(object oFollower, int nFollowerPartyFlag, int nFollowerCampFlag);

// unlocks a follower locked into the active party
void Party_UnlockFollower(object oFollower);

void Party_GenerateBanterArray()
{
    object oPC = GetHero();
    object [] arParty = GetPartyList();
    int nSize = GetArraySize(arParty);

    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_GeneratePartyBanter", "START, party size= " + IntToString(nSize));
    // First, init all party banter system variables
    SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, OBJECT_INVALID);
    SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, OBJECT_INVALID);
    SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, OBJECT_INVALID);
    SetLocalInt(GetModule(), PARTY_BANTER_ROTATION_COUNTER, 0);

    // If there are no party members or only 1 follower -&gt; return
    // (system works for at least 2 followers)
    if(nSize &lt;= 2) // player only (size 1), player+follower (size 2)
    {
        Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_GeneratePartyBanter", "No party members, not generating array");
        return;
    }

    // If two party members -&gt; randomize them into slots 1 and 2 (3 remains empty to flag a smaller array)
    int nRand = Random(1); // 50/50, 2 options: 1-2 or 2-1
    if(nSize == 3)
    {
        if(nRand == 0)
        {
            SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[1]);
            SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[2]);
        }
        else
        {
            SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[2]);
            SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[1]);
        }
    }


    // We need to do something simple here - randomize the order of 3 party members
    // Lets call them 1, 2 and 3. Original, I know.
    // We have the following possible 6 results:
    // 1) 1-2-3
    // 2) 1-3-2
    // 3) 2-1-3
    // 4) 2-3-1
    // 5) 3-1-2
    // 6) 3-2-1
    // We'll just do a simple random generation of number between 1 and 6 and that
    // would be the new order
    // Notice that since the player is arParty[0] then the following applies:
    // follower 1 == arParty[1];
    // follower 2 == arParty[2];
    // follower 3 == arParty[3];

    nRand = Random(6) + 1;
    if(nSize &gt;= 4)
    {
        switch(nRand)
        {
            case 1: // 1-2-3
            {
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[1]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[2]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, arParty[3]);
                break;
            }
            case 2: // 1-3-2
            {
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[1]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[3]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, arParty[2]);
                break;
            }
            case 3: // 2-1-3
            {
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[2]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[1]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, arParty[3]);
                break;
            }
            case 4: // 2-3-1
            {
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[2]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[3]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, arParty[1]);
                break;
            }
            case 5: // 3-1-2
            {
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[3]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[1]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, arParty[2]);
                break;
            }
            case 6: // 3-2-1
            {
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, arParty[3]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, arParty[2]);
                SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, arParty[1]);
                break;
            }
        }
    }

    Party_DumpPartyBanterArray();
}

int Party_FollowerInBanterArraySlot(object oFollower, int nSlot)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_FollowerInBanterArraySlot",
        "Looking for follower in party banter array, follower= " + GetTag(oFollower) + ", slot= " + IntToString(nSlot));

    int nRet = FALSE;
    object oArrayFollower;

    if(nSlot == 1)
        oArrayFollower = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1);
    else if(nSlot == 2)
        oArrayFollower = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2);

    if(oArrayFollower == oFollower)
        nRet = TRUE;

    if(nRet == TRUE)
        Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_FollowerInBanterArraySlot", "Follower is in the slot!");
    else
        Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_FollowerInBanterArraySlot", "Follower is NOT in the slot!");

    return nRet;
}


void Party_RotateBanterArray()
{
    // Party banter array can be size 2 or 3:
    // Size 2: 1-2 change into: 2-1
    // Size 3: 1-2-3 change into 2-3-1

    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_RotateBanterArray", "START");

    object oTempFollower; // used to store first follower during the switch
    int nSize;

    object oFollower1 = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1);
    object oFollower2 = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2);
    object oFollower3 = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3);
    int nCounter = GetLocalInt(GetModule(), PARTY_BANTER_ROTATION_COUNTER);
    nCounter++;
    SetLocalInt(GetModule(), PARTY_BANTER_ROTATION_COUNTER, nCounter);
    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_RotateBanterArray", "Rotation counter is now: " + IntToString(nCounter));

    if(oFollower3 == OBJECT_INVALID) // no 3rd follower
        nSize = 2;
    else
        nSize = 3;

    if(nSize == 2)
    {
        SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, oFollower2);
        SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, oFollower1);
    }
    else if(nSize == 3)
    {
        SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1, oFollower2);
        SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2, oFollower3);
        SetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3, oFollower1);
    }

    Party_DumpPartyBanterArray();

}

void Party_DumpPartyBanterArray()
{
    object oFollower1 = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_1);
    object oFollower2 = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_2);
    object oFollower3 = GetLocalObject(GetModule(), PARTY_BANTER_ARRAY_SLOT_3);
    int nCounter = GetLocalInt(GetModule(), PARTY_BANTER_ROTATION_COUNTER);

    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_DumpPartyBanterArray", "party banter follower 1: " + GetTag(oFollower1));
    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_DumpPartyBanterArray", "party banter follower 2: " + GetTag(oFollower2));
    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_DumpPartyBanterArray", "party banter follower 3: " + GetTag(oFollower3));
    Log_Trace(LOG_CHANNEL_SYSTEMS, "Party_DumpPartyBanterArray", "party banter rotation counter: " + IntToString(nCounter));

}

object Party_GetActiveFollowerByTag(string sTag)
{
    object [] arParty = GetPartyList(GetHero());
    int i;
    int nSize = GetArraySize(arParty);
    object oCurrent;
    for(i = 0; i &lt; nSize; i++)
    {
        oCurrent = arParty[i];
        if(GetTag(oCurrent) == sTag)
            return oCurrent;
    }
    return OBJECT_INVALID;
}

object Party_GetFollowerByTag(string sTag)
{
    // We have to retrieve the follower like this. Trying to do it with
    // GetObjectByTag proved to mess up lots of stuff. -- yaron.
    object [] arParty = GetPartyPoolList();
    int i;
    int nSize = GetArraySize(arParty);
    object oCurrent;
    for(i = 0; i &lt; nSize; i++)
    {
        oCurrent = arParty[i];
        if(GetTag(oCurrent) == sTag)
            return oCurrent;
    }

    return UT_GetNearestObjectByTag(GetMainControlled(), sTag, TRUE);

}

void Party_SetFollowerInCamp(object oFollower, int nFollowerPartyFlag, int bSetInactive = TRUE)
{
    WR_SetPlotFlag(PLT_GEN00PT_PARTY, nFollowerPartyFlag, FALSE);
    WR_SetFollowerState(oFollower, FOLLOWER_STATE_AVAILABLE, FALSE);
    if(bSetInactive)
        WR_SetObjectActive(oFollower, FALSE);
}

void Party_LockFollower(object oFollower, int nFollowerPartyFlag, int nFollowerCampFlag)
{
    string sFollower = GetTag(oFollower);
    object oPC = GetHero();
    object oArea = GetArea(oPC);

    if(GetFollowerState(oFollower) == FOLLOWER_STATE_ACTIVE)
    {
        WR_SetFollowerState(oFollower, FOLLOWER_STATE_LOCKEDACTIVE);
        return;
    }
    // follower not in active

   // Clearing active party so there won't be 1+4 party members
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_ALISTAIR_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_ALISTAIR_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_DOG_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_DOG_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_SHALE_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_SHALE_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_STEN_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_STEN_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_ZEVRAN_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_ZEVRAN_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_OGHREN_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_OGHREN_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_LELIANA_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_LELIANA_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_MORRIGAN_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_MORRIGAN_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_WYNNE_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_WYNNE_IN_CAMP, TRUE, TRUE);
    if(WR_GetPlotFlag( PLT_GEN00PT_PARTY, GEN_LOGHAIN_RECRUITED))
        WR_SetPlotFlag(PLT_GEN00PT_PARTY, GEN_LOGHAIN_IN_CAMP, TRUE, TRUE);

    WR_SetPlotFlag(PLT_GEN00PT_PARTY, nFollowerPartyFlag, TRUE, TRUE); // Setting locked followers's in-party flag here since it won't be trigger using the GUI
    WR_SetFollowerState(oFollower, FOLLOWER_STATE_LOCKEDACTIVE, FALSE);

    // Party picker GUI is triggered in player_core, through the event

    SetPartyPickerGUIStatus(PP_GUI_STATUS_USE);
    ShowPartyPickerGUI();
}

void Party_UnlockFollower(object oFollower)
{
    if(GetFollowerState(oFollower) == FOLLOWER_STATE_LOCKEDACTIVE)
        WR_SetFollowerState(oFollower, FOLLOWER_STATE_ACTIVE);
}

void DEBUG_ScaleFolloweItems(object oFollower)
{
    object [] arItems = GetItemsInInventory(oFollower, GET_ITEMS_OPTION_ALL);
    int nSize = GetArraySize(arItems);
    Log_Trace(LOG_CHANNEL_SYSTEMS, "DEBUG_ScaleFolloweItems", "START, number of item: " + IntToString(nSize));

    int i;
    object oCurrent;
    int nItemMaterialProgression;
    int nMaterialType;
    int nItemLevel;
    for(i = 0; i &lt; nSize; i++)
    {
        oCurrent = arItems[i];
        nItemMaterialProgression = GetItemMaterialProgression(oCurrent);
        if(nItemMaterialProgression &gt; 0)
        {
            // Find out what level/column to scale the item to
            // == creature level / 3
            nItemLevel = ((GetLevel(oFollower) - 1) / 3) + 1;
            if(nItemLevel &lt;= 0) nItemLevel = 1;
            else if(nItemLevel &gt; 8) nItemLevel = 8;
            Log_Trace(LOG_CHANNEL_SYSTEMS, "DEBUG_ScaleFolloweItems", "Scaling item: " + GetTag(oCurrent) + " to ITEM LEVEL: " + IntToString(nItemLevel));

            nMaterialType = GetM2DAInt(199, "Material" + IntToString(nItemLevel), nItemMaterialProgression);
            // scale item
            SetItemMaterialType(oCurrent, nMaterialType);
        }

    }
}





/** @} */</text>
	</Agent>
</Resource>