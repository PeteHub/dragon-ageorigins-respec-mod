<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="33" Folder="\_Core Includes\" ResRefName="wrappers_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\wrappers_h.nss?moduleid=1&amp;resrefid=33" Requested="0">
	<Agent type="empty">
		<ResRefName>wrappers_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>/*******************************************************************************
* This include file contains wrappers functions to important engine functions.
* Designers should use these instead of the engine functions wrapped inside.
********************************************************************************/

#include "log_h"
#include "global_objects_h"
#include "events_h"
#include "core_h"
#include "config_h"

#include "plt_tut_control_followers"
#include "autoss_constants_h"

//void main() {}

int WR_ClearAllCommands(object oObject, int bHardClear = FALSE);
int WR_GetPlotFlag(string strPlot, int nFlag, int nCallScript = FALSE);
void WR_SetPlotFlag(string strPlot, int nFlag, int nValue, int nCallScript = FALSE);
void WR_DestroyObject(object oObject);
void WR_SetObjectActive(object oObject, int bStatus, int nAnimation = -1, int nVFX = -1);
void WR_AddCommand(object oObject, command cCommand, int bAddToFront = FALSE, int bStatic = FALSE, int nOverrideAddBehavior = -1, float fTimeout = 0.0);
void WR_RemoveCommand(object oObject, command cCommand);
void WR_SetFollowerState(object oCreature, int nState, int nSendEvent = TRUE, int nMinLevel = 0, int bPreventLevelup = FALSE);
void WR_SetFollowerSubState(object oCreature, int nSubState);
void WR_TogglePlotIcon(object oCreature, int nActive = TRUE);
void WR_SetWorldMapLocationStatus(object oLocation, int nStatusId, int bSuppressActiveFlash = FALSE);
void WR_SetWorldMapGuiStatus(int nStatus);
void WR_SetWorldMapPlayerLocation(object oMap, object oLocation);
void WR_SetWorldMapPrimary(object oMapId);
void WR_SetWorldMapSecondary(object oMapId);
void WR_TakeAutoScreenshot(int flagID, int n2DA, string s2da = "");


string _GetFollowerStateName(int nState)
{
    string sRet;
    switch (nState)
    {
        case FOLLOWER_STATE_ACTIVE: sRet = "FOLLOWER_STATE_ACTIVE"; break;
        case FOLLOWER_STATE_AVAILABLE: sRet = "FOLLOWER_STATE_AVAILABLE"; break;
        case FOLLOWER_STATE_INVALID: sRet = "FOLLOWER_STATE_INVALID"; break;
        case FOLLOWER_STATE_LOADING: sRet = "FOLLOWER_STATE_LOADING"; break;
        case FOLLOWER_STATE_LOCKEDACTIVE: sRet = "FOLLOWER_STATE_LOCKEDACTIVE"; break;
        case FOLLOWER_STATE_SUSPENDED: sRet = "FOLLOWER_STATE_ACTIVE"; break;
        case FOLLOWER_STATE_UNAVAILABLE: sRet = "FOLLOWER_STATE_ACTIVE"; break;

    }
    return sRet;
}


void WR_SetStoryPlot(string sPlot)
{
    string sPlotName = GetPlotResRef(sPlot);
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "wrappers_h.WR_SetStoryPlot", "story plot: " + sPlotName);
    SetStoryPlot(sPlot);
}

int WR_ClearAllCommands(object oObject, int bHardClear = FALSE)
{
    #ifdef DEBUG
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS,"wrappers_h.WR_ClearAllCommands","", oObject);
    #endif

    int nRet = ClearAllCommands(oObject, bHardClear);
    return nRet;
}

int WR_GetPlotFlag(string strPlot, int nFlag, int nCallScript = FALSE)
{
    object oPC = GetHero();
    object oParty = GetParty(oPC);
    int nPlotName = GetPlotEntryName(strPlot);
    string sPlotName = GetPlotResRef(strPlot);
    if((sPlotName) == "") sPlotName = strPlot;
    int nCurrent = GetPartyPlotFlag(oParty, strPlot, nFlag, nCallScript);
    string sFlagName = GetPlotFlagName(strPlot, nFlag);

    LogTrace(LOG_CHANNEL_PLOT, "GetPlot [" + sPlotName + "] ["
        + sFlagName + "] = [" + ToString(nCurrent) + "]");
    //Log_Trace_Plot("wrappers_h.WR_GetPartyPlotFlag", sPlotName, nFlag, nCurrent);
    return nCurrent;
}

void WR_SetPlotFlag(string strPlot, int nFlag, int nValue, int nCallScript = FALSE)
{
    object oPC = GetHero();
    object oParty = GetParty(oPC);
    int nPlotName = GetPlotEntryName(strPlot);
    string sPlotName = GetPlotResRef(strPlot);
    if((sPlotName) == "") sPlotName = strPlot;
    int nCurrent = GetPartyPlotFlag(oParty, strPlot, nFlag, nCallScript);
    string sFlagName = GetPlotFlagName(strPlot, nFlag);
    LogTrace(LOG_CHANNEL_PLOT, "SetPlot [" + sPlotName + "] ["
        + sFlagName + "] -&gt; [" + ToString(nValue) + "]");

    if (!nCallScript)
    {
        TrackPlotEvent(EVENT_TYPE_SET_PLOT, OBJECT_SELF, oPC, nValue, -1, sPlotName, sFlagName);
    }
    SetPartyPlotFlag(oParty, strPlot, nFlag, nValue, nCallScript);
}

void WR_DestroyObject(object oObject)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS,"wrappers_h.WR_DestroyObject","", oObject);

    DestroyObject(oObject, 0);
}

void WR_SetObjectActive(object oObject, int bActive, int nAnimation = -1, int nVFX = -1)
{
    if(GetObjectActive(oObject) == bActive)
    {
        Log_Trace( LOG_CHANNEL_SYSTEMS_WRAPPERS, "wrappers_h.WR_SetObjectActive",
               "Object already same state as requested - doing nothing");
        return;
    }
    // Handle default appear/disappear animation if one is not defined.
    if (nAnimation == -1 )
    {
        nAnimation = 0;
        // Only use default if:
        //  - Object is a Creature
        //  - Creature is Alive
        //  - We are going from Active -&gt; Inactive or Inactive -&gt; Active
        if (GetObjectType(oObject) == OBJECT_TYPE_CREATURE &amp;&amp; !IsDead(oObject) &amp;&amp; GetObjectActive(oObject) != bActive)
        {
            if (bActive &amp;&amp; GetM2DAInt(TABLE_APPEARANCE,"bHasAppearAnim", GetAppearanceType(oObject)))
            {
                nAnimation = 648;
            }
            else if (!bActive &amp;&amp; GetM2DAInt(TABLE_APPEARANCE,"bHasDisappearAnim", GetAppearanceType(oObject)))
            {
                nAnimation = 649;
            }
        }
    }

    // Handle default appear/disappear VFX if one is not defined
    if (nVFX == -1)
    {
        if (bActive)
        {
            nVFX = GetM2DAInt(TABLE_APPEARANCE, "AppearVFX", GetAppearanceType(oObject));
        }
        else
        {
            nVFX = 0;
        }
    }

    SetObjectActive(oObject, bActive, nAnimation, nVFX);

    if (bActive)
    {
        SignalEvent(oObject, Event(EVENT_TYPE_OBJECT_ACTIVE));
    }

    Log_Trace( LOG_CHANNEL_SYSTEMS_WRAPPERS, "wrappers_h.WR_SetObjectActive",
               "bActive: " + ToString(bActive) + ", nAnimation: " + ToString(nAnimation) + ", nVFX: " + ToString(nVFX),
               oObject );
}

void WR_RemoveCommand(object oObject, command cCommand)
{
    int nCommandType = GetCommandType(cCommand);
    string sCommand = "wrappers_h.WR_RemoveCommand" + Log_GetCommandNameById(nCommandType);

    Log_Trace_Commands(sCommand, cCommand, oObject);



    if(!IsObjectValid(oObject))
    {
        Log_Trace_Scripting_Error(sCommand, "used on invalid object");
        return;
    }

    if(nCommandType == COMMAND_TYPE_INVALID)
    {
        Log_Trace_Scripting_Error(sCommand, "invalid input parameter for cCommand (COMMAND_TYPE_INVALID");
        return;
    }


/*    command cCurrent = GetCurrentCommand(oObject);
      if(cCurrent == cCommand)
        Log_Systems("*** Removing current command", LOG_LEVEL_WARNING, oObject, LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
      else
        Log_Systems("*** Removing from queue", LOG_LEVEL_WARNING, oObject, LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
*/

    int nSize = GetCommandQueueSize(oObject);
/*    if(nSize == 0)
        Log_Systems("*** Command queue is currently empty", LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
    else
        Log_Systems("*** Command queue size BEFORE REMOVING COMMAND is: " + IntToString(nSize), LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);*/


    int i;
    int nType;
/*    for(i = 0; i &lt; nSize; i++)
    {
        cCurrent = GetCommandByIndex(oObject, i);
        nType = GetCommandType(cCurrent);
        if(cCurrent == cCommand)
            Log_Systems("*** (TO BE REMOVED) COMMAND[" + IntToString(i) + "]= " + IntToString(nType), LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
        else
            Log_Systems("*** COMMAND[" + IntToString(i) + "]= " + IntToString(nType), LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
    }
*/

//    Log_Systems("*** REMOVING COMMAND (" + IntToString(nCommandType) + ")", LOG_LEVEL_DEBUG, oObject, LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
    RemoveCommand(oObject, cCommand);
}

void WR_AddCommand(object oObject, command cCommand, int bAddToFront = FALSE, int bStatic = FALSE,
    int nOverrideAddBehavior = -1, float fTimeout = 0.0)
{
    int nCommandType = GetCommandType(cCommand);

    // timeout check
    // if a timeout was selected AND this is not a follower AND we're in combat AND it's the creatures first timer command
    // then shorten the timer so if the creature moves he'll stop faster and will then have a chance to reevaluate
    // his threat towards the party
    if(fTimeout &gt; 0.0 &amp;&amp; !IsFollower(oObject) &amp;&amp; GetCombatState(oObject) == TRUE &amp;&amp;
        GetLocalInt(oObject, CREATURE_HAS_TIMER_ATTACK) == 0)
    {
        SetLocalInt(oObject, CREATURE_HAS_TIMER_ATTACK, 1); // applied only for first timer check
        fTimeout = 1.0; // quick timeout
    }

    if (!IsObjectValid(oObject))
    {
        #ifdef DEBUG
        Log_Trace_Scripting_Error("WR_AddCommand()", Log_GetCommandNameById(nCommandType) + " used on invalid object.");
        #endif
        return;
    }

    if (nCommandType == COMMAND_TYPE_INVALID || nCommandType == 0)
    {
        #ifdef DEBUG
        Log_Trace_Scripting_Error("WR_AddCommand()", "Invalid input parameter for cCommand (COMMAND_TYPE_INVALID)");
        #endif
        Warning("Something is trying to add an invalid command from scripting (command_type 0). Please contact georg.)");
        return;
    }

    #ifdef DEBUG
    Log_Trace_Commands("WR_AddCommand()", cCommand, oObject);
    #endif


    #ifdef DEBUG
//  Log_Trace(LOG_CHANNEL_COMMANDS, "WR_AddCommand", "*** START, object= " + GetTag(oObject) + ". command= " + IntToString(nCommandType));
    if (bAddToFront)
        Log_Trace(LOG_CHANNEL_COMMANDS, "WR_AddCommand()", "*** Adding command to front");
    if (bStatic)
        Log_Trace(LOG_CHANNEL_COMMANDS, "WR_AddCommand()", "*** Command is static");
    if (fTimeout &gt; 0.0)
        Log_Trace(LOG_CHANNEL_COMMANDS, "WR_AddCommand()", "*** Timeout: " + FloatToString(fTimeout));
    #endif

    command cCurrent = GetCurrentCommand(oObject);
    int nCurrentType = GetCommandType(cCurrent);
/*    if(nCurrentType == COMMAND_TYPE_INVALID)
        Log_Systems("*** No command is executing currently", LOG_LEVEL_DEBUG, oObject,
            LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
    else
        Log_Systems("*** Current executing command is: " + IntToString(nCurrentType), LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
*/

    int nSize = GetCommandQueueSize(oObject);
    if(nSize == 0)
    {
/*        Log_Systems("*** Command queue is currently empty", LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS); */
    }
    else
    {
/*        Log_Systems("*** Command queue size is: " + IntToString(nSize), LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);*/
        int i;
        command cCurrent;
        int nType;
        for(i = 0; i &lt; nSize; i++)
        {
            cCurrent = GetCommandByIndex(oObject, i);
            nType = GetCommandType(cCurrent);
/*            Log_Systems("*** COMMAND[" + IntToString(i) + "]= " + IntToString(nType), LOG_LEVEL_DEBUG, oObject
                , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);*/
        }
    }

/*
    Log_Trace(LOG_CHANNEL_COMMANDS, "*** ADDING NEW COMMAND (" + IntToString(nCommandType) + ")");

    if (GetCommandType (cCommand) == COMMAND_TYPE_ATTACK)
    {
        Log_Trace_Combat("wrappers_h","AddCommand(Attack) called from " + GetCurrentScriptName() + " on " + ToString(oObject));
    }
*/
    if(fTimeout &gt; 0.0 &amp;&amp; !IsFollower(oObject)) // followers can't have command timeout
        cCommand = SetCommandFloat(cCommand, fTimeout, 5);

    AddCommand(oObject, cCommand, bAddToFront, bStatic, nOverrideAddBehavior);


    /*nCurrentType = GetCommandType (  GetCurrentCommand(oObject) );

    if(nCurrentType == COMMAND_TYPE_INVALID)
        Log_Systems("*** VERIFY: No command is executing currently", LOG_LEVEL_DEBUG, oObject,
            LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);
    else
        Log_Systems("*** VERIFY: executing command is: " + IntToString(nCurrentType), LOG_LEVEL_DEBUG, oObject
            , LOG_SYSTEMS_SUBTYPE_WRAPPER_FUNCTIONS);*/


}

void WR_SetFollowerState(object oCreature, int nState, int nSendEvent = TRUE, int nMinLevel = 0, int bPreventLevelup = FALSE)
{
    int nOldState = GetFollowerState(oCreature);
    int nOldSubState = GetFollowerSubState(oCreature);
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS,
            "wrappers_h.WR_SetFollowerSubState",
            "OLD STATE: " + _GetFollowerStateName(nOldSubState), oCreature);

    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS,
            "wrappers_h.WR_SetFollowerSubState",
            "NEW STATE: " + _GetFollowerStateName(nState), oCreature);


    // change event script if the follower is in or out of the party.
    switch(nState)
    {
        case FOLLOWER_STATE_LOCKEDACTIVE:
        case FOLLOWER_STATE_ACTIVE:
        {
            // remove stationary flag
            SetLocalInt(oCreature, AI_FLAG_STATIONARY, 0);
            // Adding follower to active party
            if(GetLocalInt(GetModule(), TUTORIAL_ENABLED))
                WR_SetPlotFlag(PLT_TUT_CONTROL_FOLLOWERS, TUT_CONTROL_FOLLOWERS_1, TRUE);
            SetEventScript(oCreature, RESOURCE_SCRIPT_PLAYER_CORE);

            if(IsPartyPerceivingHostiles(oCreature) &amp; GetCombatState(oCreature) == FALSE)
                SetCombatState(oCreature, TRUE);

            // Remove from any team
            SetTeamId(oCreature, -1);

            // set interactive (in case some very bad script messed it up)
            SetObjectInteractive(oCreature, TRUE);

            // Set player rank
            SetCreatureRank(oCreature, CREATURE_RANK_PLAYER);

            SetImmortal(oCreature, FALSE);
            SetPlot(oCreature, FALSE);
            if(GetPartyLeader() != oCreature)
                SetFollowPartyLeader(oCreature, TRUE);
            SetLocalInt(oCreature, AMBIENT_SYSTEM_STATE, 0); // AMBIENT_SYSTEM_DISABLED

            InitHeartbeat(oCreature, CONFIG_CONSTANT_HEARTBEAT_RATE);

            if(nSendEvent)
                SendPartyMemberHiredEvent(oCreature, FALSE, nMinLevel, bPreventLevelup);
            break;
        }
        case FOLLOWER_STATE_AVAILABLE:
        case FOLLOWER_STATE_INVALID:
        case FOLLOWER_STATE_UNAVAILABLE:
        case FOLLOWER_STATE_SUSPENDED:
        {           
            if(IsSummoned(oCreature) &amp;&amp; nState != FOLLOWER_STATE_INVALID)
            {
                 Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "WR_SetFollowerState", 
                    "Trying to apply an invalid state to a summoned creature - aborting change");
                 return;
            }
            // -----------------------------------------------------------------
            // Non party members do not get a heartbeat
            // -----------------------------------------------------------------
            EndHeartbeat(oCreature);

            // Remove effects
            Effects_RemoveAllEffects(oCreature);
            // -----------------------------------------------------------------
            // Georg: We got a problem with removing modal effects this person
            //        might have applied to others. Reason: By the time this
            //        event fires, they are no longer in the party and can not
            //        remove ukpeep effects of others. The following code takes
            //        care of that
            // -----------------------------------------------------------------
            object[]  partyList = GetPartyList();
            int     nArraySize = GetArraySize(partyList);
            int     iMember;

            for (iMember = 0; iMember &lt; nArraySize; iMember++)
            {
                RemoveEffectsByParameters(partyList[iMember],EFFECT_TYPE_UPKEEP, ABILITY_INVALID, oCreature); //first all upkeep effects
                RemoveEffectsByParameters(partyList[iMember],EFFECT_TYPE_INVALID, ABILITY_INVALID, oCreature); //then all others
            }

            SetEventScript(oCreature, RESOURCE_SCRIPT_CREATURE_CORE);

            SetGroupId(oCreature, GROUP_FRIENDLY);

            // set interactive (in case some very bad script messed it up)
            SetObjectInteractive(oCreature, TRUE);


            if (!IsSummoned(oCreature))
            {
                // Setting immortal so follower can't be killed outside of party
                // Note: a few places in the game allow the follower to be killed outside of the party but they
                // set the follower script to be player_core so he would rise again when combat over.
                SetImmortal(oCreature, TRUE);
            }

            // If follower is currently in the ACTIVE party then fire a partry-member-fired event
            if(nSendEvent)
            {
                if(GetFollowerState(oCreature) == FOLLOWER_STATE_ACTIVE || GetFollowerState(oCreature) == FOLLOWER_STATE_LOCKEDACTIVE)
                    SendPartyMemberFiredEvent(oCreature);
            }
            break;
        }


    }

    SetFollowerState(oCreature, nState);


}

void WR_SetFollowerSubState(object oCreature, int nSubState)
{
    int nOldState = GetFollowerState(oCreature);
    int nOldSubState = GetFollowerSubState(oCreature);
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS,
            "wrappers_h.WR_SetFollowerSubState",
            "OLD STATE: " + IntToString(nOldState) + ", OLD SUB-STATE: " + IntToString(nOldSubState), oCreature);

    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS,
            "wrappers_h.WR_SetFollowerSubState",
            "NEW SUB-STATE: " + IntToString(nSubState));

    SetFollowerSubState(oCreature, nSubState);
}

void WR_SetGameMode(int nGameMode)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "wrappers_h.WR_SetGameMode", "nGameMode: " + IntToString(nGameMode));

    event evModeChange = Event(EVENT_TYPE_SET_GAME_MODE);
    evModeChange = SetEventInteger(evModeChange, 0, nGameMode);

    SignalEvent(GetModule(), evModeChange);
}

void WR_TogglePlotIcon(object oCreature, int nActive = TRUE)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "wrappers_h.WR_TogglePlotIcon", "ACTIVE/INACTIVE: " + IntToString(nActive)
        + ", for creature: " + GetTag(oCreature));

    if(!IsObjectValid(oCreature))
    {
        Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "wrappers_h.WR_TogglePlotIcon", "INVALID CREATURE OBJECT");
        return;
    }

    if(nActive)
        ShowFloatyIcon(oCreature, "PlotDestination");
        //ShowFloatyIcon(oCreature, "");
    else
        ShowFloatyIcon(oCreature, "");

}





void WR_SetWorldMapLocationStatus(object oLocation, int nStatusId, int bSuppressActiveFlash = FALSE)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "WR_SetWorldMapLocationStatus", "Location: " + GetTag(oLocation) + ", Status: " + IntToString(nStatusId));
    SetWorldMapLocationStatus(oLocation, nStatusId, bSuppressActiveFlash);
}

void WR_SetWorldMapGuiStatus(int nStatus)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "WR_SetWorldMapGuiStatus", ", Status: " + IntToString(nStatus));
    SetWorldMapGuiStatus(nStatus);
}

void WR_SetWorldMapPlayerLocation(object oMap, object oLocation)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "WR_SetWorldMapPlayerLocation", ", Map: " + GetTag(oMap) + ", Location: " + GetTag(oLocation));
    SetWorldMapPlayerLocation(oMap, oLocation);
}

void WR_SetWorldMapPrimary(object oMapId)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "WR_SetWorldMapPrimary", ", World Map: " + GetTag(oMapId));
    SetWorldMapPrimary(oMapId);
}

void WR_SetWorldMapSecondary(object oMapId)
{
    Log_Trace(LOG_CHANNEL_SYSTEMS_WRAPPERS, "WR_SetWorldMapSecondary", ", World Map: " + GetTag(oMapId));
    SetWorldMapSecondary(oMapId);
}

void WR_TakeAutoScreenshot(int flagID, int n2DA, string s2da = "")
{
    // Does the majority of the work in the auto screenshot system. Takes
    // a plot flag ID and 2DA file information as arguments and takes the
    // screenshot. Should only be used on auto screenshot plot and 2DA files.

    //Grab screenshot information from the 2da file
    int titleStrRef = GetM2DAInt(n2DA, AUTOSS_2DA_TITLE, flagID, s2da);
    int descStrRef = GetM2DAInt(n2DA, AUTOSS_2DA_DESC, flagID, s2da);
    string screenshotID = GetM2DAString(n2DA, AUTOSS_2DA_SSID, flagID, s2da);
    int priority = GetM2DAInt(n2DA, AUTOSS_2DA_PRIORITY, flagID, s2da);
    int isOverride = GetM2DAInt(n2DA, AUTOSS_2DA_OVERRIDE, flagID, s2da);

    //Strings for logging info
    string title = GetStringByStringId(titleStrRef);
    string desc = GetStringByStringId(descStrRef);

    //Dump the screenshot data for the log
    Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "AUTOSCREENSHOTBEGIN");
    Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", screenshotID);
    Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", title);
    Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", desc);
    switch(priority)
    {
        case AUTOSS_PRIORITY_DISABLED:
        {
            Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "Priority: disabled");
            break;
        }
        case AUTOSS_PRIORITY_PRIMARY:
        {
            Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "Priority: primary (always fires)");
            break;
        }
        case AUTOSS_PRIORITY_SECONDARY:
        {
            Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "Priority: secondary");
            break;
        }
        case AUTOSS_PRIORITY_TERTIARY:
        {
            Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "Priority: tertiary");
            break;
        }
        case AUTOSS_PRIORITY_TOTAL_FLUFF:
        {
            Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "Priority: total fluff");
            break;
        }
    }
    if(isOverride != 0)
        Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "*** Overridden, event sent without screenshot");
    Log_Trace(LOG_CHANNEL_SYSTEMS, "wrappers_h.WR_TakeAutoScreenshot", "AUTOSCREENSHOTEND");



    //Take the screenshot
    if(priority != AUTOSS_PRIORITY_DISABLED) //Make sure it hasn't been disabled
    {
        if(isOverride == 0)
        {
            //Check the game mode. We only want autoscreenshots taken in combat, exploration, dialog, or cutscene.
            switch(GetGameMode())
            {
                case GM_COMBAT:
                case GM_CUTSCENE:
                case GM_DIALOG:
                case GM_EXPLORE:
                {
                    //Send it with the correct priority: not all screenshots are going to show up
                    if(priority &lt;= AUTOSS_PRIORITY_CUTOFF)
                        TakeScreenshot(TRUE, titleStrRef, descStrRef, AUTOSS_SCREENSHOT_STORY_HIGH_PRIORITY, screenshotID);
                    else
                        TakeScreenshot(TRUE, titleStrRef, descStrRef, AUTOSS_SCREENSHOT_STORY_LOW_PRIORITY, screenshotID);
                    break;
                }
                default:
            }
        }
        else
        {
            // Only sending an event, not a screenshot... this allows for a
            // canned screenshot to be inserted
            LogStoryEvent(StringToInt(screenshotID));
        }

    }
}</text>
	</Agent>
</Resource>