<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Resource ModuleID="1" OwnerModuleID="1" ResRefID="30" Folder="\_Core Includes\" ResRefName="rules_h" IsCore="1" OwnerIsCore="1" Type="3" State="0" ObjectName="" Relationship="" ResType="nss" URI="bw-db://.\BWDATOOLSET/bw_dragonage_content\rules_h.nss?moduleid=1&amp;resrefid=30" Requested="0">
	<Agent type="empty">
		<ResRefName>rules_h</ResRefName>
		<LocalCopy type="bool">False</LocalCopy>
		<text>///////////////////////////////////////////////////
//
//  rules_h
//
// Include file used to organize rules related functions.
// Owner: Brent Knowles
//
// Note to Georg or Yaron: We will have to handle "item scaling"
// in this script. I have some imcomplete hacks but we'll need
// to talk the programmers about how we'll implement the scaling as discussed
// here:  http://staff.bioware.com/wiki/index.html?page=CombatRules&amp;wiki=eclipse&amp;action=view
//
///////////////////////////////////////////////////

#include "ability_h"
#include "sys_gore_h"
#include "config_h"
#include "combat_h"
#include "2da_constants_h"


// -----------------------------------------------------------------------------
// Max creatures in combat at the same time we can support.
// -----------------------------------------------------------------------------
const int MAX_CREATURES_IN_COMBAT = 24;







/** @brief &lt;brief description&gt;
*
* Wrapper function to pull the currently equipped weapon's "make modifier"
* @param &lt;param - first parameter
*
* @returns &lt;what&gt;
*/
float Rules_GetWeaponMakeModifier(object oAttacker)
{
         return 1.0; // need GetM2DAFloat for this to work properly
}
/** @brief &lt;brief description&gt;
*
* Wrapper function to pull the currently equipped weapon's absolute speed
* @param &lt;param - first parameter
*
* @returns &lt;what&gt;
*/
float Rules_GetWeaponSpeed(object oAttacker)
{
         return 1.5; // need GetM2DAFloat for this to work properly
}
/** @brief &lt;brief description&gt;
*
* returns a Control Panel number (from 2da) that influences damage scaling
* @param &lt;param - first parameter
*
* @returns &lt;what&gt;
*/
int Rules_GetBaseDamageScaler(object oAttacker)
{
         return GetM2DAInt(TABLE_SPELL_CONJURINGSPEED, "DamageBase", 1);
}
/** @brief &lt;brief description&gt;
*
* returns a Control Panel number (from 2da) that influences damage scaling
* @param &lt;param - first parameter
*
* @returns &lt;what&gt;
*/
int Rules_GetAttackScaler(object oAttacker)
{
         return GetM2DAInt(TABLE_SPELL_CONJURINGSPEED, "AttackModifier", 1);
}
/** @brief &lt;brief description&gt;
*
* Tempoary function due to a bug. Looks up 2da for weapon type and
* returns the "CombatRating" column
* @param &lt;param - first parameter
*
* @returns &lt;what&gt;
*/
int Rules_GetWeaponAttackRating(object oAttacker)
{
        // return GetM2DAInt(111, "CombatRating", 2);
        return FloatToInt(GetWeaponAttackRating(oAttacker));
}
/** @brief &lt;brief description&gt;
*
* Tempoary function due to a bug. Looks up 2da for weapon type and
* returns the "CombatRating" column
* @param &lt;param - first parameter
*
* @returns &lt;what&gt;
*/
float Rules_GetModifiedWeaponAttackRating(object oAttacker)
{
    // TBD: run the rules here

    return 7.0;
}

float Rules_GetWeaponArmorPenetration(object oAttacker, object oTarget)
{
// returns calculated number based on 2da lookup for material type
    float fValue = GetWeaponArmorPenetration(oAttacker, oTarget);
    return 1.05 * fValue;
}
/*int Rules_GetArmor(object oAttacker)
{
// returns calculated number based on 2da lookup for material type
    //int nValue = GetCreatureArmor(oAttacker);
    //return nValue;
    return 0;
}*/


/**-----------------------------------------------------------------------------
* @brief does an ability resistance check
*
* Calculates resistance based on attacker and target. Returning TRUE if attack
* has been resisted, FALSE otherwise
* @param oAttacker creature triggering the ability
* @param oTarget creature defending against oAttacker's ability
*
* @returns TRUE for resisting, FALSE for failing to resist
*
* @author Brent
* -----------------------------------------------------------------------------*/
/*
int Rules_ResistanceCheck(object oAttacker, object oTarget);
int Rules_ResistanceCheck(object oAttacker, object oTarget)
{
    // TBD: put real rules here

    int nRand = Random(100);
    int nRet;
    if(nRand &lt; 60)
        nRet = RESISTANCE_CHECK_FAILURE; // always failing
    else
        nRet = RESISTANCE_CHECK_SUCCESS;

    return nRet;
}
*/



// -----------------------------------------------------------------------------
// This code figures out the Min Damage a weapon does and the max damage a weapon does.
// Remember that a weapon's speed AND the values in the base items 2da work together
// using a formula to create the min damage and the maximum damage.
// -----------------------------------------------------------------------------

int Rules_GetWeaponMinDamage(object oAttacker)
{   //DEBUG_PrintToScreen("A");
    int nBaseDamage2DA = Rules_GetBaseDamageScaler(oAttacker);
    //DEBUG_PrintToScreen(IntToString(nBaseDamage2DA));
    //DEBUG_PrintToScreen(IntToString(nBaseDamage2DA));
    float fMaterialWeaponModifier = Rules_GetWeaponMakeModifier(oAttacker); // need GetM2DAFloat for this to work properly
    int nWeaponBaseDamage = GetWeaponBaseDamage(oAttacker);
    //DEBUG_PrintToScreen(IntToString(nWeaponBaseDamage));
    int nTotal = (nWeaponBaseDamage + nBaseDamage2DA);
    //DEBUG_PrintToScreen("599");
    float fValue = nTotal * fMaterialWeaponModifier;
    int nBaseDamage = FloatToInt(fValue);

    return nBaseDamage -1;
}
// determines the max weapon damage based on the rules formula
int Rules_GetWeaponMaxDamage(int nMin, object oAttacker)
{
    float fSpeed = Rules_GetWeaponSpeed(oAttacker);
    int nDamageBase = GetM2DAInt(TABLE_SPELL_CONJURINGSPEED, "DamageRange", 1);;
    //DEBUG_PrintToScreen(IntToString(nDamageBase));
    int nValue = nMin + FloatToInt((fSpeed * IntToFloat(nDamageBase)));
    return nValue;
}







/** ----------------------------------------------------------------------------
* @brief Checks oCreature is currently casting a spell and if so, performs a check
*        according to the rules to see if it is interrupted.
*
* @param oCreature          The Creature being damaged
* @param nDamage            The Damage Received
* @param nDamageType        The Damage Type Received
*
* @author   Georg Zoeller
*  --------------------------------------------------------------------------**/
int Rules_CheckSpellInterruption(object oCreature, int nDamage, int nDamageType);
int Rules_CheckSpellInterruption(object oCreature, int nDamage, int nDamageType)
{

    // -------------------------------------------------------------------------
    // Check spell interruption
    // -------------------------------------------------------------------------
    if(IsConjuring(OBJECT_SELF))
    {
        Log_Rules("rules_core-&gt;EVENT_TYPED_DAMAGED-&gt;Rules_CheckSpellInterruption: got DAMAGED event while conjuring a spell - interrupting spell!",
        LOG_LEVEL_WARNING, OBJECT_SELF);

        // ---------------------------------------------------------------------
        // Get config mode setting from 2da. Possible Options:
        // Spell Interruption Mode Simple - Any attack cancels our spell
        // ---------------------------------------------------------------------
        if (Config_GetSetting(CONFIG_SETTING_SPELLINTERRUPTION) == CONFIG_VALUE_SPELLINTERRUPTION_SIMPLE)
        {
            return TRUE;
        }
    }
    return FALSE;
}



/** ----------------------------------------------------------------------------
* @brief Interrupts a creature's spell (by cancelling the current command)
*
* @param oInterrupt The Creature being interrupted
*
* @author Georg Zoeller
*  --------------------------------------------------------------------------**/
void Rules_InterrupSpell(object oInterrupt);
void Rules_InterrupSpell(object oInterrupt)
{
   command cCurrent = GetCurrentCommand(OBJECT_SELF);
   WR_RemoveCommand(OBJECT_SELF, cCurrent);
}</text>
	</Agent>
</Resource>